{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"Tickersnap <p> Python Library for Indian Stock Market Analysis \ud83d\udcc8   Streamlined access to comprehensive Indian stock market data from Tickertape IN, enabling powerful financial analysis, automated screening, and market sentiment tracking. </p> <p>Important Notice</p> <ul> <li>This library heavily relies on the (unofficial) public APIs from Tickertape IN.</li> <li>I am not affiliated with Tickertape.in in any way.</li> <li>Tickertape had been my go to for stock analysis tool for like forever!</li> <li>and I am greatful to them for the work they do!</li> </ul> <p>Disclaimer</p> <ul> <li>All data are for informational purposes only and should not be considered as financial advice.</li> <li>Always consult qualified financial advisors before making investment decisions.</li> <li>I am not an expert in finance.</li> <li>I am not responsible for how one uses this library, the consequences, or financial outcomes of using it.</li> </ul>"},{"location":"#key-features","title":"\u2728 Key Features","text":"<ul> <li>\ud83d\udcca Complete Market Coverage - Access 5,000+ stocks and 270+ ETFs from Indian exchanges</li> <li>\ud83c\udfaf Stock Scorecard Analysis - 6-category evaluation (Performance, Valuation, Growth, Profitability, Entry Point, Red Flags)</li> <li>\ud83d\udcc8 Market Mood Index (MMI) - Real-time sentiment tracking with Fear/Greed zones</li> <li>\u26a1 High Performance - Concurrent processing with progress tracking for large datasets</li> <li>\ud83d\udee1\ufe0f Robust &amp; Reliable - Comprehensive error handling and extensive test coverage</li> <li>\ud83d\udd27 Developer Friendly - Clean APIs with intuitive method names and comprehensive documentation</li> </ul>"},{"location":"#requirements","title":"\ud83d\udee0\ufe0f Requirements","text":"<ul> <li>Python 3.10+</li> </ul>"},{"location":"#quick-start","title":"\ud83d\ude80 Quick Start","text":""},{"location":"#installation","title":"Installation","text":"<pre><code>pip install tickersnap\n</code></pre>"},{"location":"#basic-usage","title":"Basic Usage","text":"<pre><code>from tickersnap.mmi import MarketMoodIndex\nfrom tickersnap.stock import StockScorecard\nfrom tickersnap.lists import Assets\n\n# Check market sentiment\nmmi = MarketMoodIndex()\nmood = mmi.get_current_mmi()\nprint(f\"Market Mood: {mood.value:.1f} ({mood.zone.value})\")\n\n# Analyze a stock\nscorecard = StockScorecard()\nanalysis = scorecard.get_scorecard(\"TCS\")\nif analysis.performance:\n    print(f\"TCS Performance: {analysis.performance.rating.value}\")\n\n# Get all stocks\nassets = Assets()\nall_stocks = assets.get_all_stocks()\nprint(f\"Total stocks available: {len(all_stocks)}\")\n</code></pre> <p>\ud83d\udc49 Complete Quick Start Guide - Learn with real examples!</p>"},{"location":"#core-modules","title":"\ud83d\udce6 Core Modules","text":"Module Description Use Case \ud83d\udccb Assets Complete list of stocks &amp; ETFs Portfolio building, universe selection \ud83d\udcca Stock Scorecard 6-category stock analysis Investment screening, due diligence \ud83d\udcc8 Market Mood Index Sentiment tracking (0-100 scale) Market timing, contrarian investing <p>\ud83d\udc49 See detailed documentation: | MMI | Assets | Stocks |</p>"},{"location":"#what-you-can-build","title":"\ud83d\udca1 What You Can Build","text":"<ul> <li>\ud83d\udcca Stock Screeners - Find quality stocks automatically</li> <li>\ud83d\udcc8 Portfolio Trackers - Monitor your investments daily  </li> <li>\ud83c\udfaf Market Alerts - Get notified of sentiment extremes</li> <li>\ud83d\udd0d Research Tools - Comprehensive market analysis</li> <li>\ud83e\udd16 Trading Bots - Automated analysis and signals</li> <li>\ud83e\udde0 LLM Agents - Build agents to get live financial data</li> </ul> <p>\ud83d\udc49 Every module is filled with usage examples throughout the documentation!</p>"},{"location":"#quick-links","title":"\ud83d\udcda Quick Links","text":"<ul> <li>Quick Start Guide - Get started in minutes</li> <li>Installation Guide - Detailed setup instructions</li> <li>Development Guide - Contributing and development setup</li> <li>Module Documentation:<ul> <li>Market Mood Index (MMI) - Market sentiment tracking</li> <li>Assets Lists - Stock and ETF data access</li> <li>Stock Scorecard - Comprehensive stock analysis</li> </ul> </li> </ul>"},{"location":"#license","title":"\ud83d\udcc4 License","text":"<p>Licensed under the Apache License 2.0</p>"},{"location":"#contributing","title":"\ud83e\udd1d Contributing","text":"<p>Contributions are welcome!</p> <p>(contribution guidelines are coming soon.)</p> <p>Made with \u2764\ufe0f for Fin Lovers in India</p>"},{"location":"quickstart/","title":"Quick Start Guide","text":"<p>Welcome to Tickersnap - your gateway to Indian stock market analysis! \ud83d\ude80</p> <p>This guide will get you up and running in minutes... whether you're an experienced trader, developer, investor, enthusiast, or just a beginner getting started with market analysis!</p>"},{"location":"quickstart/#getting-started","title":"\ud83d\ude80 Getting Started","text":"<p>Don't let complex financial jargon intimidate you! Tickersnap makes Indian stock market analysis accessible to everyone!</p> <p>It's simple... just understand the basic concepts, pick sample code and run them to see things in action!</p> <p>\ud83d\udce6 Install the package</p> <p>To get started, just install the package, run usage example codes (available throughout the docs), and see the results for yourself.</p> <p>Experiment and add your modifications... and when you understand the library, build cool and more complex stuff for market analysis!</p> <p>\ud83e\udde0 Basic Concepts</p> <p>Tickersnap has 3 core modules that work together:</p> Module What it does Example Learn More \ud83d\udcc8 MMI Tracks market sentiment Market fear or greed today? MMI \ud83d\udccb Assets Lists all stocks &amp; ETFs Get all 5,000+ Indian stocks Assets \ud83d\udcca Scorecard Analyzes individual stocks TCS performance: Good/Bad? Stocks <p>\ud83d\udca1 The Power of Combination</p> <p>Use Assets to find stocks \u2192 Scorecard to analyze them \u2192 MMI for market timing</p>"},{"location":"quickstart/#quick-start-examples","title":"\u26a1\ufe0f Quick Start Examples","text":"Market Mood Index (MMI)Stock Scorecard Analysis <p>Example</p> <pre><code>from tickersnap.mmi import MarketMoodIndex\n\n# Get market sentiment\nmmi = MarketMoodIndex()\ncurrent = mmi.get_current_mmi()\nchanges = mmi.get_mmi_changes()\n\nprint(f\"\ud83d\udcca Market Mood: {current.value:.1f} ({current.zone.value})\")\nprint(f\"\ud83d\udcc8 vs Yesterday: {changes.vs_last_day:+.1f}\")\nprint(f\"\ud83d\udcc5 vs Last Week: {changes.vs_last_week:+.1f}\")\n\n# Investment signal\nif current.zone.value in [\"Extreme Fear\", \"Fear\"]:\n    print(\"\ud83d\udfe2 Consider buying opportunities\")\nelif current.zone.value in [\"Extreme Greed\", \"Greed\"]:\n    print(\"\ud83d\udd34 Be cautious, market may be overheated\")\n</code></pre> <pre><code>from tickersnap.stock import StockScorecard\n\n# Analyze a stock\nscorecard = StockScorecard()\nanalysis = scorecard.get_scorecard(\"TCS\")\n\nprint(f\"\ud83d\udcc8 TCS Stock Analysis:\")\nif analysis.performance:\n    print(f\"Performance: {analysis.performance.value} ({analysis.performance.rating.value})\")\nif analysis.valuation:\n    print(f\"Valuation: {analysis.valuation.value} ({analysis.valuation.rating.value})\")\nif analysis.growth:\n    print(f\"Growth: {analysis.growth.value} ({analysis.growth.rating.value})\")\nif analysis.entry_point:\n    print(f\"Entry Point: {analysis.entry_point.value} ({analysis.entry_point.rating.value})\")\n\n# Quick quality check\ngood_categories = sum(1 for cat in [\n    analysis.performance, analysis.valuation, \n    analysis.growth, analysis.profitability\n] if cat and cat.rating.value == \"good\")\n\nprint(f\"Quality Score: {good_categories}/4 categories are good\")\n</code></pre>"},{"location":"quickstart/#understanding-output","title":"\ud83c\udfaf Understanding Output","text":"Market Mood Index (MMI)Stock Scorecard Analysis MMI Zones Meaning Implications 0-30 Extreme Fear \ud83d\udfe2 Good buying opportunity 30-50 Fear \u26aa Monitor trends 50-70 Greed \ud83d\udfe1 Be selective 70-100 Extreme Greed \ud83d\udd34 Avoid new positions Stock Ratings Meaning Implications good \ud83d\udfe2 Positive signal must consider analysing the stock further! okay \ud83d\udfe1 Neutral/Average most common case scenario for most stocks! bad \ud83d\udd34 Negative signal something is wrong with the stock! unknown \u26aa Insufficient data probably new or banned, data missing!"},{"location":"quickstart/#next-steps","title":"\ud83c\udf93 Next Steps","text":"<ul> <li>\ud83d\udccb Assets Lists - Get all stocks and ETFs</li> <li>\ud83d\udcca Stock Scorecard - Advanced stock analysis</li> <li>\ud83d\udcc8 Market Mood Index - Market sentiment tracking</li> <li>\ud83d\udcd6 Full Documentation - Complete guides and examples</li> </ul> <p>Happy Coding &amp; Happy Analyzing! \u2728</p>"},{"location":"setup/development/","title":"Development","text":""},{"location":"setup/development/#setup","title":"Setup","text":""},{"location":"setup/development/#1-clone-the-repository","title":"1. Clone the repository","text":"<pre><code>git clone https://github.com/mratanusarkar/tickersnap.git\ncd tickersnap\n</code></pre>"},{"location":"setup/development/#2-installing-uv","title":"2. Installing <code>uv</code>","text":"<p>Note</p> <p>If you are using conda base environment as the default base environment for your python projects, run the below command to activate the base environment.</p> <p>If not, skip this step and continue with the next step.</p> <pre><code>conda activate base\n</code></pre> <p>If you don't have <code>uv</code> installed, you can install it by running:</p> LinuxWindows <pre><code>pip install uv\n</code></pre> <pre><code>pip install uv\n</code></pre>"},{"location":"setup/development/#3-setting-up-the-project-environment","title":"3. Setting up the project environment","text":"<p>Note</p> <p>Incase you want to do a fresh install, and setup project from scratch using <code>pyproject.toml</code>, skip this step (3) and continue with the next step (4).</p> <p>We recommend using <code>uv</code> to manage your project environment since <code>tickersnap</code> was developed using <code>uv</code>, and you can replicate the same environment from <code>uv.lock</code> file by just running:</p> <pre><code>uv sync\n</code></pre> <p>But, feel free to use any python based environment and package manager of your choice.</p> <p>About uv</p> <p>uv is a fast, simple, and secure Python package manager. It is recommended to use <code>uv</code> to manage your project environment.</p>"},{"location":"setup/development/#4-install-dependencies","title":"4. Install dependencies","text":"<p>If you want to do a fresh install with dev and docs dependencies, you can run:</p> LinuxWindows <p>Setup project environment (only if not already done):</p> <pre><code>uv venv\nsource .venv/bin/activate\n</code></pre> <p>Install dependencies:</p> <pre><code>uv pip install -e \".[dev,docs]\"\n</code></pre> <p>Setup project environment:</p> <pre><code>uv venv\n.venv\\Scripts\\activate\n</code></pre> <p>Install dependencies:</p> <pre><code>uv pip install -e \".[dev,docs]\"\n</code></pre>"},{"location":"setup/development/#code-quality","title":"Code Quality","text":"<p>Before committing, please ensure that the code is formatted and styled correctly. Run the following commands to check and fix code style issues:</p> <pre><code># Check and fix code style issues\nblack .\nruff check --fix .\n</code></pre>"},{"location":"setup/development/#build-and-serve-the-documentation","title":"Build and serve the documentation","text":"<p>You can build and serve the documentation by running:</p> <pre><code>uv pip install -e .[docs]\nmkdocs serve\n</code></pre>"},{"location":"setup/installation/","title":"Installation","text":"<p>Note</p> <p>This guide is for end users using <code>Tickersnap</code> python package. For developers and contributors, see Development.</p>"},{"location":"setup/installation/#prerequisites","title":"Prerequisites","text":"<ul> <li>\ud83d\udc0d Python \u2265 3.10</li> <li>\ud83d\udda5\ufe0f Conda or venv</li> </ul>"},{"location":"setup/installation/#setup","title":"Setup","text":""},{"location":"setup/installation/#install-tickersnap","title":"Install Tickersnap","text":"<p>It is recommended to install <code>tickersnap</code> in a virtual environment from PyPI or Conda in a Python=3.10 (or above) environment.</p> Install using PyPIInstall using CondaInstall from source <p>Activate your virtual environment (recommended):</p> <pre><code>source .venv/bin/activate\n</code></pre> <p>Install <code>tickersnap</code> using <code>pip</code>:</p> <pre><code>pip install tickersnap\n</code></pre> <p>Create a new environment using Conda:</p> <pre><code>conda create -n my-project python=3.10\n</code></pre> <p>Activate your virtual environment:</p> <pre><code>conda activate my-project\n</code></pre> <p>Install <code>pip</code> and <code>tickersnap</code> using <code>conda</code>:</p> <pre><code>conda install pip\npip install tickersnap\n</code></pre> <p>Note</p> <p>By installing <code>tickersnap</code> from source, you can explore the latest features and enhancements that have not yet been officially released.</p> <p>Note</p> <p>Please note that the latest changes may be still in development and may not be stable and may contain bugs.</p> <p>Install from source</p> <pre><code>pip install git+https://github.com/mratanusarkar/tickersnap.git\n</code></pre>"},{"location":"tickersnap/lists/","title":"Assets List","text":"<p>Tickersnap (this python package) provides complete access to all stocks and ETFs listed on Indian stock exchanges.</p>"},{"location":"tickersnap/lists/#overview","title":"Overview","text":"<p>The Assets List module provides comprehensive coverage of the Indian equity market with 5,312 total assets (5,041 stocks + 271 ETFs) listed on Indian stock exchanges as of June 2025.</p> <p>Note</p> <p>This is dynamic and sources its data from Tickertape's comprehensive database, hence the data is always up to date and the above numbers might change over time.</p>"},{"location":"tickersnap/lists/#disclaimers","title":"Disclaimers","text":"<p>Disclaimer</p> <ul> <li>Since this module is meant to just get the list of assets, alone this module doesn't have much usage.</li> <li>The <code>slug</code> fields can be used to directly navigate to www.tickertape.in/stocks/slug or www.tickertape.in/etfs/slug.</li> <li>The <code>sid</code> fields can be used to interact with Tickertape APIs.</li> <li>When combined with other modules from <code>Tickersnap</code>, it can get very powerful for automated analysis!</li> </ul> <p>Disclaimer</p> <p>The stock and ETF data provided through this module is for informational purposes only. Not financial advice. Always consult qualified financial advisors before making investment decisions.</p>"},{"location":"tickersnap/lists/#modules","title":"Modules","text":"Module Description Target Audience For Public Use When to use? Assets High-level asset lists General Users \u2705 When you want to get the list of all stocks or ETFs or both combined API Raw API access Advanced Users \u2705 When you want to get combined data filtered by starting with a letter Models Data models Internal Use \u274c NA"},{"location":"tickersnap/lists/#usage-examples","title":"Usage Examples","text":""},{"location":"tickersnap/lists/api/","title":"API Reference","text":""},{"location":"tickersnap/lists/api/#overview","title":"Overview","text":"<p>The Assets List API provides programmatic access to Tickertape's complete list of stocks and ETFs through a single endpoint. This unofficial Python client wraps the Tickertape API with robust error handling, input validation, and response parsing.</p> <p>Base URL and Request Type:</p> API Request Type Base URL Response Type Assets List GET <code>https://api.tickertape.in/stocks/list?filter={filter}</code> JSON (application/json) <p>Headers:</p> <ul> <li>Authentication: None required</li> <li>Rate Limiting: Not specified by Tickertape</li> <li>Response Format: JSON (application/json)</li> </ul>"},{"location":"tickersnap/lists/api/#api-details","title":"API Details","text":"Assets List Data"},{"location":"tickersnap/lists/api/#1-assets-list","title":"1. Assets List","text":""},{"location":"tickersnap/lists/api/#11-api-details","title":"1.1 API Details:","text":"<p>Retrieve complete list of all available assets (stocks and ETFs) with optional filtering.</p> <p>Endpoint: <code>GET /stocks/list</code> Base URL: <code>https://api.tickertape.in</code> Full URL: <code>https://api.tickertape.in/stocks/list?filter={filter}</code></p>"},{"location":"tickersnap/lists/api/#12-parameters","title":"1.2 Parameters:","text":"Parameter Type Required Options Default Description <code>filter</code> string No 'a'-'z', 'others' None Filter assets by starting letter or 'others' <p>Filter Options: - Letters: 'a' to 'z' (case insensitive) - assets starting with that letter - Others: 'others' (case insensitive) - assets not starting with letters - None: No filter - returns all available assets (~5312 total)</p>"},{"location":"tickersnap/lists/api/#13-request-example","title":"1.3 Request Example:","text":"<pre><code># Get all assets\ncurl -X GET \"https://api.tickertape.in/stocks/list\"\n\n# Get assets starting with 'a'\ncurl -X GET \"https://api.tickertape.in/stocks/list?filter=a\"\n\n# Get assets not starting with letters\ncurl -X GET \"https://api.tickertape.in/stocks/list?filter=others\"\n</code></pre>"},{"location":"tickersnap/lists/api/#14-python-usage","title":"1.4 Python Usage:","text":"AssetsListAPI <pre><code>from tickersnap.lists import AssetsListAPI\n\n# Basic usage - get all assets\nwith AssetsListAPI() as client:\n    response = client.get_data()\n    print(f\"Total assets: {len(response.data)}\")\n\n    # Print first few assets\n    for asset in response.data[:3]:\n        print(f\"{asset.name} ({asset.ticker}) - {asset.type}\")\n\n# Filter by starting letter\nwith AssetsListAPI() as client:\n    response = client.get_data(filter='a')\n    print(f\"Assets starting with 'a': {len(response.data)}\")\n\n# Get assets not starting with letters\nwith AssetsListAPI() as client:\n    response = client.get_data(filter='others')\n    print(f\"Other assets: {len(response.data)}\")\n\n# With custom timeout\nwith AssetsListAPI(timeout=30) as client:\n    response = client.get_data(filter='t')\n</code></pre>"},{"location":"tickersnap/lists/api/#15-response-schema","title":"1.5 Response Schema:","text":"<pre><code>{\n    \"success\": true,\n    \"data\": [\n        {\n            \"sid\": \"1234\",\n            \"name\": \"Reliance Industries Limited\",\n            \"ticker\": \"RELIANCE\",\n            \"type\": \"stock\",\n            \"slug\": \"reliance-industries-ltd\",\n            \"isin\": \"INE002A01018\"\n        },\n        {\n            \"sid\": \"5678\",\n            \"name\": \"Nippon India ETF Nifty 50\",\n            \"ticker\": \"NIFTYBEES\",\n            \"type\": \"etf\",\n            \"slug\": \"nippon-india-etf-nifty-50\",\n            \"isin\": \"INF204KB17I5\"\n        }\n    ]\n}\n</code></pre>"},{"location":"tickersnap/lists/api/#16-response-fields","title":"1.6 Response Fields:","text":"<ul> <li>success (boolean): API call status</li> <li>data (array): List of asset objects</li> <li>data[].sid (string): Tickertape's security identifier</li> <li>data[].name (string): Full company or fund name</li> <li>data[].ticker (string): Exchange trading symbol</li> <li>data[].type (string): Asset type ('stock' or 'etf')</li> <li>data[].slug (string): URL path for Tickertape</li> <li>data[].isin (string): International Securities Identification Number</li> </ul>"},{"location":"tickersnap/lists/api/#error-handling","title":"Error Handling","text":"<p>1 HTTP Status Codes:</p> Code Description Response 200 Success Valid JSON response with data 4xx Client Error Error message in response.text 5xx Server Error Error message in response.text <p>2 Python Exception Types:</p> <pre><code># Filter validation errors\nValueError: Invalid filter 'xyz'. Valid options are: a, b, c, ..., z, others. All filters are case insensitive.\nValueError: Empty filter '' not allowed. Use filter=None or omit the parameter to get all assets.\nValueError: Filter ' a ' contains leading or trailing whitespaces. Please remove the whitespaces and try again.\n\n# HTTP request errors  \nException: HTTP 404 error: Not Found\nException: Request failed: Connection timeout\n\n# Response validation errors\nException: Data validation error: Field 'success' missing\n</code></pre> <p>3 Error Handling Example:</p> <pre><code>from tickersnap.lists import AssetsListAPI\n\ntry:\n    with AssetsListAPI() as client:\n        response = client.get_data(filter='invalid')\nexcept ValueError as e:\n    print(f\"Parameter error: {e}\")\nexcept Exception as e:\n    print(f\"API error: {e}\")\n</code></pre>"},{"location":"tickersnap/lists/api/#client-configuration","title":"Client Configuration","text":"Timeout SettingsConnection Management <pre><code># Default timeout: 10 seconds\nclient = AssetsListAPI()\n\n# Custom timeout: 30 seconds  \nclient = AssetsListAPI(timeout=30)\n\n# For slower connections\nclient = AssetsListAPI(timeout=60)\n</code></pre> <pre><code># Context manager (recommended)\nwith AssetsListAPI() as client:\n    response = client.get_data()\n    # Client automatically closed\n\n# Manual management\nclient = AssetsListAPI()\ntry:\n    response = client.get_data()\nfinally:\n    client.close()  # Important: always close\n</code></pre>"},{"location":"tickersnap/lists/api/#usage-examples","title":"Usage Examples","text":"Fetch all AssetsFiltered SearchData ExportAsset Statistics <pre><code>from tickersnap.lists import AssetsListAPI\n\nwith AssetsListAPI() as client:\n    all_assets = client.get_data()\n\n    # Categorize by type\n    stocks = [asset for asset in all_assets.data if asset.type == \"stock\"]\n    etfs = [asset for asset in all_assets.data if asset.type == \"etf\"]\n\n    print(f\"Total assets: {len(all_assets.data)}\")\n    print(f\"Stocks: {len(stocks)}\")\n    print(f\"ETFs: {len(etfs)}\")\n</code></pre> <pre><code>from tickersnap.lists import AssetsListAPI\n\nsearch = 'A'\n\nwith AssetsListAPI() as client:\n    response = client.get_data(filter=search.lower())\n\n    print(f\"Assets starting with '{search}':\")\n\n    # show first 10 assets\n    for asset in response.data[:10]:\n        print(f\"  {asset.ticker}: {asset.name}\")\n\n    print(f\"Total found: {len(response.data)}\")\n</code></pre> <pre><code>import csv\nfrom tickersnap.lists import AssetsListAPI\n\ndef export_to_csv(filename=\"assets.csv\"):\n    \"\"\"Export all assets to CSV file.\"\"\"\n    with AssetsListAPI() as client:\n        response = client.get_data()\n\n        with open(filename, 'w', newline='', encoding='utf-8') as csvfile:\n            fieldnames = ['sid', 'name', 'ticker', 'type', 'slug', 'isin']\n            writer = csv.DictWriter(csvfile, fieldnames=fieldnames)\n\n            writer.writeheader()\n            for asset in response.data:\n                writer.writerow({\n                    'sid': asset.sid,\n                    'name': asset.name,\n                    'ticker': asset.ticker,\n                    'type': asset.type,\n                    'slug': asset.slug,\n                    'isin': asset.isin\n                })\n\n        print(f\"Exported {len(response.data)} assets to {filename}\")\n\n# export_to_csv()  # uncomment to run\n</code></pre> <pre><code>def analyze_assets():\n    \"\"\"Analyze asset distribution and statistics.\"\"\"\n    with AssetsListAPI() as client:\n        all_assets = client.get_data()\n\n        # Count by type\n        type_counts = {}\n        for asset in all_assets.data:\n            type_counts[asset.type] = type_counts.get(asset.type, 0) + 1\n\n        # Count by starting letter\n        letter_counts = {}\n        for asset in all_assets.data:\n            first_char = asset.name[0].upper() if asset.name else 'Unknown'\n            if first_char.isalpha():\n                letter_counts[first_char] = letter_counts.get(first_char, 0) + 1\n            else:\n                letter_counts['Others'] = letter_counts.get('Others', 0) + 1\n\n        print(\"\ud83d\udcca Asset Statistics\")\n        print(f\"Total Assets: {len(all_assets.data)}\")\n        print(\"\\nBy Type:\")\n        for asset_type, count in sorted(type_counts.items()):\n            print(f\"  {asset_type.upper()}: {count}\")\n\n        print(\"\\nTop 5 Starting Letters:\")\n        sorted_letters = sorted(letter_counts.items(), key=lambda x: x[1], reverse=True)\n        for letter, count in sorted_letters[:5]:\n            print(f\"  {letter}: {count}\")\n\nanalyze_assets()\n</code></pre>"},{"location":"tickersnap/lists/api/#rate-limiting-best-practices","title":"Rate Limiting &amp; Best Practices","text":""},{"location":"tickersnap/lists/api/#recommended-usage","title":"Recommended Usage","text":"<ul> <li>Asset discovery: Once per day or as needed</li> <li>Filtered searches: Multiple calls acceptable for different filters</li> <li>Bulk operations: Implement delays between requests</li> </ul> Client ReuseError Recovery <p>\u2705 Good: Reuse client for multiple calls</p> <pre><code>with AssetsListAPI() as client:\n    all_assets = client.get_data()\n    a_assets = client.get_data(filter='a')\n    others = client.get_data(filter='others')\n    # process responses...\n</code></pre> <p>\u274c Avoid: Creating new client for each call  </p> <pre><code>for filter_char in ['a', 'b', 'c']:\n    with AssetsListAPI() as client:\n        response = client.get_data(filter=filter_char)\n</code></pre> <pre><code>import time\nfrom tickersnap.lists import AssetsListAPI\n\ndef robust_fetch(filter_value=None, retries=3):\n    \"\"\"Fetch assets with retry logic.\"\"\"\n    for attempt in range(retries):\n        try:\n            with AssetsListAPI(timeout=30) as client:\n                return client.get_data(filter=filter_value)\n        except Exception as e:\n            if attempt == retries - 1:\n                raise e\n            print(f\"Attempt {attempt + 1} failed: {e}\")\n            time.sleep(2 ** attempt)  # exponential backoff\n</code></pre>"},{"location":"tickersnap/lists/api/#tickersnap.lists.api","title":"<code>tickersnap.lists.api</code>","text":"<p>Tickersnap Assets List Client</p> <p>A module for accessing list of all available assets (stocks and ETFs) from the Tickertape API.</p> <p>This module provides a streamlined way to fetch lists of stocks and ETFs from Tickertape, with optional filtering capabilities.</p> Features <ul> <li>Fetch complete list of all available assets (stocks and ETFs)</li> <li>Filter assets by starting letter ('a'-'z') or 'others'</li> <li>Preserve and access the original tickertape API response structure</li> <li>Simple client interface with proper error handling</li> </ul>"},{"location":"tickersnap/lists/api/#tickersnap.lists.api.AssetsListAPI","title":"<code>AssetsListAPI</code>","text":"<p>Client for fetching assets list data from Tickertape.</p> <p>Supports fetching the complete list of stocks and ETFs, or filtering by starting letter. The filter can be any letter from 'a' to 'z' (case insensitive) or 'others' (case insensitive) for assets that don't start with letters.</p> <ul> <li>BASE_URL: \"https://api.tickertape.in/stocks/list\"</li> </ul> Example <pre><code># Using as a client object (don't forget to close)\nassets = AssetsListAPI()\ndata = assets.get_data()  # Get all assets\ndata_filtered = assets.get_data(filter='a')  # Get assets starting with 'a'\nassets.close()\n</code></pre> <pre><code># Using as context manager (automatically closed)\nwith AssetsListAPI() as assets:\n    data = assets.get_data(filter='x')\n    print(f\"Found {len(data.data)} assets\")\n</code></pre>"},{"location":"tickersnap/lists/api/#tickersnap.lists.api.AssetsListAPI.__init__","title":"<code>__init__(timeout=10)</code>","text":"<p>Initialize the Assets List client.</p> <p>Parameters:</p> Name Type Description Default <code>timeout</code> <code>int</code> <p>Request timeout in seconds. Defaults to 10.</p> <code>10</code>"},{"location":"tickersnap/lists/api/#tickersnap.lists.api.AssetsListAPI.__enter__","title":"<code>__enter__()</code>","text":"<p>Context manager entry.</p>"},{"location":"tickersnap/lists/api/#tickersnap.lists.api.AssetsListAPI.__exit__","title":"<code>__exit__(exc_type, exc_val, exc_tb)</code>","text":"<p>Context manager exit.</p>"},{"location":"tickersnap/lists/api/#tickersnap.lists.api.AssetsListAPI.close","title":"<code>close()</code>","text":"<p>Close the HTTP client.</p>"},{"location":"tickersnap/lists/api/#tickersnap.lists.api.AssetsListAPI.get_data","title":"<code>get_data(filter=None)</code>","text":"<p>Fetch all available list of assets (stocks and ETFs) from Tickertape, with optional filtering by starting letter or 'others'.</p> <p>Parameters:</p> Name Type Description Default <code>filter</code> <code>Optional[str]</code> <p>Filter to apply. Can be:</p> <ul> <li>Any letter <code>'a'</code> to <code>'z'</code> (case insensitive):     assets starting with that letter</li> <li><code>'others'</code> (case insensitive): assets not starting with letters</li> <li>None (default): fetch all assets</li> </ul> <code>None</code> <p>Returns:</p> Name Type Description <code>AssetsListResponse</code> <code>AssetsListResponse</code> <p>Parsed API response containing list of assets.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If filter is not a valid option.</p> <code>Exception</code> <p>If HTTP request fails or data validation fails.</p>"},{"location":"tickersnap/lists/asset/","title":"Assets","text":"<p>Note</p> <p>This module gets full data for all stocks or ETFs or both combined. If you want to get data for a specific stock or ETF, use the AssetsListAPI module.</p> <p>A high-level Python interface for accessing Tickertape's complete list of stocks and ETFs with simplified, user-friendly methods.</p> <p>It provides simple functions to get filtered lists of all stocks, ETFs, or combined assets for daily market analysis, with no headache of complex API handling, and distraction free excessive data fields knowledge!</p>"},{"location":"tickersnap/lists/asset/#overview","title":"Overview","text":"<p>Data Coverage</p> <ul> <li>5,312 total assets (5,041 stocks + 271 ETFs) listed on Indian stock exchanges as of June 2025.</li> <li>The package will reflect the latest data from Tickertape's comprehensive database.</li> </ul> <p>The <code>Assets</code> class provides a clean, intuitive API for accessing asset lists without dealing with complex API responses or field mappings. Perfect for portfolio management, screening applications, market analysis, and financial research.</p> <p>Key Features:</p> <ul> <li>\u2705 Complete asset coverage - All stocks and ETFs from Indian exchanges</li> <li>\u2705 Smart filtering - Separate methods for stocks, ETFs, or combined lists  </li> <li>\u2705 Essential data only - Only the fields you need for daily use</li> <li>\u2705 Fresh data - Each call fetches latest asset information</li> <li>\u2705 Error handling - Robust timeout and retry capabilities</li> <li>\u2705 Extensive Test Coverage - A robust CI/CD pipeline to identify changes in Tickertape API.</li> </ul>"},{"location":"tickersnap/lists/asset/#quick-start","title":"Quick Start","text":"<p>Get Asset Lists</p> <pre><code>from tickersnap.lists import Assets\n\n# Initialize Assets client\nassets = Assets()\n\n# Get all stocks\nstocks = assets.get_all_stocks()\nprint(f\"Total stocks: {len(stocks)}\")\nprint(f\"Sample: {stocks[0].name} ({stocks[0].ticker})\")\n\n# Get all ETFs\netfs = assets.get_all_etfs()\nprint(f\"Total ETFs: {len(etfs)}\")\nprint(f\"Sample: {etfs[0].name} ({etfs[0].ticker})\")\n\n# Get all assets (stocks + ETFs)\nall_assets = assets.get_all_assets()\nprint(f\"Total assets: {len(all_assets)}\")\n</code></pre>"},{"location":"tickersnap/lists/asset/#core-methods","title":"Core Methods","text":"All StocksAll ETFsAll Assets <p>Get complete list of all stocks listed on Indian exchanges.</p> <p>Function Signature</p> <pre><code>def get_all_stocks() -&gt; List[AssetData]\n</code></pre> <p>Returns</p> <ul> <li>List of all stock assets (~5,041 stocks)</li> <li>Essential fields: sid, name, ticker, slug, isin, type</li> </ul> <p>Example</p> <pre><code>assets = Assets()\nstocks = assets.get_all_stocks()\n\nprint(f\"Total stocks available: {len(stocks)}\")\n\n# Browse stocks\nfor stock in stocks[:5]:\n    print(f\"{stock.ticker}: {stock.name}\")\n    print(f\"  ISIN: {stock.isin}\")\n    print(f\"  Type: {stock.type}\")  # Always 'stock'\n\n# Filter by name or ticker\nreliance_stocks = [s for s in stocks if 'reliance' in s.name.lower()]\nprint(f\"Reliance related stocks: {len(reliance_stocks)}\")\n\n# Get specific stock by ticker\nhdfc_stock = next((s for s in stocks if s.ticker == 'HDFC'), None)\nif hdfc_stock:\n    print(f\"Found: {hdfc_stock.name}\")\n</code></pre> <p>Get complete list of all ETFs listed on Indian exchanges.</p> <p>Function Signature</p> <pre><code>def get_all_etfs() -&gt; List[AssetData]\n</code></pre> <p>Returns</p> <ul> <li>List of all ETF assets (~271 ETFs)</li> <li>Essential fields: sid, name, ticker, slug, isin, type</li> </ul> <p>Example</p> <pre><code>assets = Assets()\netfs = assets.get_all_etfs()\n\nprint(f\"Total ETFs available: {len(etfs)}\")\n\n# Browse ETFs\nfor etf in etfs[:5]:\n    print(f\"{etf.ticker}: {etf.name}\")\n    print(f\"  ISIN: {etf.isin}\")\n    print(f\"  Type: {etf.type}\")  # Always 'etf'\n\n# Filter by category\nnifty_etfs = [e for e in etfs if 'nifty' in e.name.lower()]\ngold_etfs = [e for e in etfs if 'gold' in e.name.lower()]\n\nprint(f\"Nifty ETFs: {len(nifty_etfs)}\")\nprint(f\"Gold ETFs: {len(gold_etfs)}\")\n\n# Get specific ETF by ticker\nnifty_bees = next((e for e in etfs if e.ticker == 'NIFTYBEES'), None)\nif nifty_bees:\n    print(f\"Found: {nifty_bees.name}\")\n</code></pre> <p>Get complete list of all assets (stocks + ETFs) in one call.</p> <p>Function Signature</p> <pre><code>def get_all_assets() -&gt; List[AssetData]\n</code></pre> <p>Returns</p> <ul> <li>List of all assets (~5,312 total)</li> <li>Combined stocks and ETFs</li> <li>Essential fields: sid, name, ticker, slug, isin, type</li> </ul> <p>Example</p> <pre><code>assets = Assets()\nall_assets = assets.get_all_assets()\n\nprint(f\"Total assets: {len(all_assets)}\")\n\n# Categorize by type\nstocks = [a for a in all_assets if a.type == 'stock']\netfs = [a for a in all_assets if a.type == 'etf']\n\nprint(f\"Stocks: {len(stocks)} ({len(stocks)/len(all_assets)*100:.1f}%)\")\nprint(f\"ETFs: {len(etfs)} ({len(etfs)/len(all_assets)*100:.1f}%)\")\n\n# Search across all assets\ndef search_assets(query):\n    return [a for a in all_assets \n           if query.lower() in a.name.lower() \n           or query.lower() in a.ticker.lower()]\n\ntata_assets = search_assets(\"tata\")\nprint(f\"Tata related assets: {len(tata_assets)}\")\n</code></pre>"},{"location":"tickersnap/lists/asset/#configuration","title":"Configuration","text":"Timeout SettingsError Handling <p>Set the HTTP request timeout for the underlying API.</p> <p>Example</p> <pre><code># Default timeout (10 seconds)\nassets = Assets()\n\n# Custom timeout for slower connections\nassets = Assets(timeout=30)\n</code></pre> <p>Handle errors gracefully.</p> <p>Example</p> <pre><code>from tickersnap.lists import Assets\n\ntry:\n    assets = Assets(timeout=30)\n    stocks = assets.get_all_stocks()\n    print(f\"Successfully fetched {len(stocks)} stocks\")\nexcept Exception as e:\n    print(f\"Failed to fetch asset data: {e}\")\n</code></pre>"},{"location":"tickersnap/lists/asset/#usage-examples","title":"Usage Examples","text":"<p>Note</p> <ul> <li>Since this module is meant to just get the list of assets, alone this module doesn't have much usage.</li> <li>The slug fields can be used to directly navigate to www.tickertape.in/stocks/slug or www.tickertape.in/etfs/slug.</li> <li>The sid fields can be used to interact with Tickertape APIs.</li> <li>When combined with other modules from <code>Tickersnap</code>, it can get very powerful for automated analysis!</li> </ul>"},{"location":"tickersnap/lists/asset/#data-fields","title":"Data Fields","text":"<p>Each asset contains the following essential information:</p> Field Type Description Example <code>sid</code> string Tickertape security identifier \"RELIANCE\" <code>name</code> string Full company/fund name \"Reliance Industries Ltd\" <code>ticker</code> string Exchange trading symbol \"RELIANCE\" <code>type</code> AssetType Asset type (stock/etf) \"stock\" <code>slug</code> string URL path for Tickertape \"reliance-industries-ltd\" <code>isin</code> string International identifier \"INE002A01018\" <p>See Models (field-reference section) for more details.</p>"},{"location":"tickersnap/lists/asset/#tickersnap.lists.asset","title":"<code>tickersnap.lists.asset</code>","text":"<p>Assets - Common usage focused List of Assets Data</p> <p>Provides simplified access to stocks and ETFs data for common daily usage:</p> <ul> <li><code>get_all_stocks()</code>: list of all stocks listed in India</li> <li><code>get_all_etfs()</code>: list of all ETFs listed in India</li> <li><code>get_all_assets()</code>: list of all assets (stocks and ETFs) listed in India</li> </ul> <p>Removes API complexity and provides clean, filtered lists for daily market analysis.</p>"},{"location":"tickersnap/lists/asset/#tickersnap.lists.asset.Assets","title":"<code>Assets</code>","text":"<p>Simplified common usage focused assets data for market analysis.</p> <p>Provides clean access to stocks and ETFs data without API complexity.</p> <p>Returns only the essential fields needed for daily use: sid, name, ticker, slug, isin (and type when getting all assets).</p>"},{"location":"tickersnap/lists/asset/#tickersnap.lists.asset.Assets.__init__","title":"<code>__init__(timeout=10)</code>","text":"<p>Initialize Assets client.</p> <p>Parameters:</p> Name Type Description Default <code>timeout</code> <code>int</code> <p>Request timeout in seconds. Defaults to 10.</p> <code>10</code>"},{"location":"tickersnap/lists/asset/#tickersnap.lists.asset.Assets.get_all_stocks","title":"<code>get_all_stocks()</code>","text":"<p>Get all available stocks.</p> <p>Returns:</p> Type Description <code>List[AssetData]</code> <p>List[AssetData]: List of all stock assets with essential fields.</p>"},{"location":"tickersnap/lists/asset/#tickersnap.lists.asset.Assets.get_all_etfs","title":"<code>get_all_etfs()</code>","text":"<p>Get all available ETFs.</p> <p>Returns:</p> Type Description <code>List[AssetData]</code> <p>List[AssetData]: List of all ETF assets with essential fields.</p>"},{"location":"tickersnap/lists/asset/#tickersnap.lists.asset.Assets.get_all_assets","title":"<code>get_all_assets()</code>","text":"<p>Get all available assets (stocks + ETFs).</p> <p>Returns:</p> Type Description <code>List[AssetData]</code> <p>List[AssetData]: List of all assets with essential fields including type.</p>"},{"location":"tickersnap/lists/models/","title":"Models","text":""},{"location":"tickersnap/lists/models/#details-and-summary","title":"Details and Summary","text":"<ul> <li>Tickertape Models: Pydantic models to hold and map the Tickertape API response for assets list, acting as a schema for the response.</li> <li>Tickersnap Models: Pydantic models to hold <code>Tickersnap</code> defined models, to work easily with the library data.</li> </ul> Tickertape Models (API Response)Tickersnap Models (Library Datatypes) <p>(coming soon)</p>"},{"location":"tickersnap/lists/models/#assets-list","title":"Assets List","text":"<ul> <li>Main model: <code>AssetsListResponse</code></li> <li>Depends on: <code>AssetData</code>, <code>AssetType</code><ul> <li><code>AssetData</code>: holds individual asset information</li> <li><code>AssetType</code>: enum for asset types (stock/ETF)</li> </ul> </li> </ul>"},{"location":"tickersnap/lists/models/#usage","title":"Usage","text":"Model Source API / Used By Description Usage For Public? <code>AssetsListResponse</code> (GET) api /stocks/list Complete list of assets with filtering get stocks and ETFs list \u2705 <code>AssetData</code> <code>AssetsListResponse</code> holds individual asset data (internal use) \u274c <code>AssetType</code> <code>AssetData</code> asset type enumeration (internal use) \u274c"},{"location":"tickersnap/lists/models/#asset-types","title":"Asset Types","text":"<ul> <li>STOCK: Individual company stocks</li> <li>ETF: Exchange Traded Funds</li> </ul>"},{"location":"tickersnap/lists/models/#filter-options","title":"Filter Options","text":"<ul> <li>Letters: 'a'-'z' (case insensitive) - assets starting with that letter</li> <li>Others: 'others' (case insensitive) - assets not starting with letters  </li> <li>None: No filter - returns all available assets</li> </ul>"},{"location":"tickersnap/lists/models/#field-reference","title":"Field Reference","text":"<p>Below is a reference for all the fields found in the assets list API models:</p> Model Fields Reference"},{"location":"tickersnap/lists/models/#1-response-structure","title":"1. Response Structure:","text":"Field Full Form Type Range/Format Description <code>success</code> Success Status <code>bool</code> true/false API response success indicator <code>data</code> Data Payload <code>List[AssetData]</code> array List of asset data objects"},{"location":"tickersnap/lists/models/#2-asset-data-fields","title":"2. Asset Data Fields:","text":"Field Full Form Type Range/Format Description <code>sid</code> Security ID <code>str</code> alphanumeric Works as the primary key across all Tickertape APIs (financials, news, screeners, etc.), and forms the last part of asset URLs <code>name</code> Security Name <code>str</code> text Human-readable security, company, or fund name <code>ticker</code> Trading Symbol <code>str</code> uppercase What brokers and market feeds show; fixed by the exchange and used in orders <code>type</code> Asset Type <code>AssetType</code> stock/etf Security type (stock or ETF) <code>slug</code> URL Slug <code>str</code> lowercase-hyphenated URL path fragment for Tickertape, useful to directly go to the assets's page on www.tickertape.in <code>isin</code> International Securities Identification Number <code>str</code> 12 characters 12-character, globally unique code defined by ISO 6166; guarantees you are settling the right security even if it trades under different tickers"},{"location":"tickersnap/lists/models/#3-asset-type-enum","title":"3. Asset Type Enum:","text":"Value Description <code>STOCK</code> Individual company stock <code>ETF</code> Exchange Traded Fund"},{"location":"tickersnap/lists/models/#tickersnap.lists.models","title":"<code>tickersnap.lists.models</code>","text":""},{"location":"tickersnap/lists/models/#tickersnap.lists.models.AssetType","title":"<code>AssetType</code>","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>Asset type (stock/ETF)</p> <ul> <li><code>STOCK</code>: stock (for stocks)</li> <li><code>ETF</code>: etf (for exchange traded funds)</li> </ul>"},{"location":"tickersnap/lists/models/#tickersnap.lists.models.AssetData","title":"<code>AssetData</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents a single security (stock/ETF) data point.</p> <p>This model follows tickertape API response's schema for list of assets data. Each asset contains basic information like SID, name, ticker, type, slug, and ISIN.</p> Field Descriptions <ul> <li>sid: Security ID (tickertape's own identifier)</li> <li>name: Security name (exchange name/company name)</li> <li>ticker: Exchange/Trading symbol</li> <li>type: Security type (stock/ETF)</li> <li>slug: URL path fragment in tickertape</li> <li>isin: International Securities Identification Number (ISIN)</li> </ul> Note <ul> <li>internal use only</li> <li>used by models: <code>AssetsListResponse</code></li> </ul>"},{"location":"tickersnap/lists/models/#tickersnap.lists.models.AssetsListResponse","title":"<code>AssetsListResponse</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents API response payload from <code>api.tickertape.in/stocks/list?filter={filter}</code> endpoint.</p> <p>It contains a list of securities (stocks and ETFs) that match the filter criteria. When no filter is provided, it returns the complete list of all assets.</p> Note <ul> <li>matches the exact API response structure</li> <li>filter can be 'a'-'z' (case insensitive) or 'others'</li> <li>no filter returns complete list</li> </ul> Reference <ul> <li>HTTP Request: GET</li> <li>URL: https://api.tickertape.in/stocks/list?filter={filter}<ul> <li>where <code>filter</code> is optional and can be 'a'-'z' or 'others'</li> </ul> </li> <li>Response Body: <code>AssetsListResponse</code></li> </ul>"},{"location":"tickersnap/mmi/","title":"Market Mood Index (MMI)","text":"<p>Quote</p> <p>\"Be fearful when others are greedy and greedy when others are fearful\"</p> <p>\u2014 Warren Buffett</p>"},{"location":"tickersnap/mmi/#what-is-mmi","title":"What is MMI?","text":"<p>The Market Mood Index (MMI) is Tickertape's proprietary sentiment indicator that measures investor emotions in the Indian stock market. It tracks market sentiment on a scale of 0-100, categorizing market mood into four distinct zones based on fear and greed psychology.</p>"},{"location":"tickersnap/mmi/#understanding-the-four-zones","title":"Understanding the Four Zones","text":"Zone Range Description Investment Signal Extreme Fear &lt; 30 Market oversold, widespread selling Good time to buy Fear 30-50 Cautious sentiment, trajectory dependent Monitor trend direction Greed 50-70 Optimistic market, overbought territory Consider selling Extreme Greed &gt; 70 Market euphoria, avoid fresh positions Wait for correction"},{"location":"tickersnap/mmi/#bull-vs-bear-the-sentiment-connection","title":"Bull vs Bear: The Sentiment Connection","text":"<p>MMI's Fear/Greed zones directly correspond to traditional Bull and Bear market sentiment. When MMI shows Fear zones, it reflects bearish sentiment (investors expecting market decline), while Greed zones indicate bullish sentiment (optimism about market rises).</p> <p>Like other sentiment indicators, MMI serves as a contrarian indicator - extreme readings often signal potential market reversals.</p> <p>Quote</p> <p>\"high greed may indicate that markets are overbought, and prices may correct soon\"</p> <p>\u2014 Kotak Securities</p>"},{"location":"tickersnap/mmi/#how-mmi-works","title":"How MMI Works","text":"<p>MMI is built using 6 fundamental factors, each providing unique insights into market psychology:</p> <ul> <li>FII Activity - Foreign institutional investor sentiment</li> <li>Volatility &amp; Skew - Market risk and direction expectations  </li> <li>Momentum - Price trend strength using moving averages</li> <li>Market Breadth - Stocks advancing vs declining ratio</li> <li>Price Strength - 52-week highs vs lows comparison</li> <li>Gold Demand - Safe haven vs equity preference</li> </ul>"},{"location":"tickersnap/mmi/#key-features","title":"Key Features","text":"<p>All thanks to www.tickertape.in for this amazing tool/indicator MMI. From what I could gather, here are it's core features:</p> <p>\u2705 91.28% Accuracy - Proven track record in predicting market tops and bottoms \u2705 Real-time Updates - Live sentiment tracking \u2705 Contrarian Indicator - Based on Warren Buffett's principle</p> <p>Disclaimer</p> <p>MMI is a sentiment tool for informational purposes only. Not financial advice. Always consult qualified financial advisors before making investment decisions.</p>"},{"location":"tickersnap/mmi/#references","title":"References","text":"<p>If you are curious and wish to explore more, here are some interesting references and articles:</p> <ul> <li>Market Sentiment - Wikipedia</li> <li>Tickertape MMI</li> <li>How MMI Helps Time Investments</li> <li>Market Trend - Wikipedia</li> <li>Bull Market</li> <li>Bear Market</li> </ul>"},{"location":"tickersnap/mmi/#about-tickersnap","title":"About Tickersnap","text":"<p>Tickersnap (this python package) provides unofficial Python API access to Tickertape's Market Mood Index and other financial data. Since Tickertape doesn't offer official APIs, Tickersnap bridges this gap for developers and analysts.</p> <p>Along with the official API, this python package also provides a streamlined way to fetch, process, and work with MMI data, as well as providing a utility-focused classes and functions to work with MMI data.</p> <p>Here are the offerings of this python package:</p> Module Description Target Audience For Public Use MMI Market Mood Index General Users, Common Users \u2705 API Raw API access Advanced Users, Want to use Tickertape API \ud83d\udfe1 Models Data models NA \u274c"},{"location":"tickersnap/mmi/api/","title":"API Reference","text":""},{"location":"tickersnap/mmi/api/#overview","title":"Overview","text":"<p>The MMI API provides programmatic access to Tickertape's Market Mood Index data through two main endpoints. This unofficial Python client wraps the Tickertape APIs with robust error handling and response validation.</p> <p>Base URLs and Request Types:</p> API Request Type Base URL Response Type Period Data GET <code>https://analyze.api.tickertape.in/homepage/mmi?period={period}</code> JSON (application/json) Current Data GET <code>https://api.tickertape.in/mmi/now</code> JSON (application/json) <p>Headers:</p> <ul> <li>Authentication: None required</li> <li>Rate Limiting: Not specified by Tickertape</li> <li>Response Format: JSON (application/json)</li> </ul>"},{"location":"tickersnap/mmi/api/#api-details","title":"API Details","text":"MMI Period Data MMI Now Data"},{"location":"tickersnap/mmi/api/#1-mmi-period","title":"1. MMI Period","text":""},{"location":"tickersnap/mmi/api/#11-api-details","title":"1.1 API Details:","text":"<p>Retrieve MMI data with historical time series for a specified period.</p> <p>Endpoint: <code>GET /homepage/mmi</code> Base URL: <code>https://analyze.api.tickertape.in</code> Full URL: <code>https://analyze.api.tickertape.in/homepage/mmi?period={period}</code></p>"},{"location":"tickersnap/mmi/api/#12-parameters","title":"1.2 Parameters:","text":"Parameter Type Required Range Default Description <code>period</code> integer No 1-10 4 Number of historical data points to return"},{"location":"tickersnap/mmi/api/#13-request-example","title":"1.3 Request Example:","text":"<pre><code>curl -X GET \"https://analyze.api.tickertape.in/homepage/mmi?period=1\"\n</code></pre>"},{"location":"tickersnap/mmi/api/#14-python-usage","title":"1.4 Python Usage:","text":"MMIPeriodAPI <pre><code>from tickersnap.mmi import MMIPeriodAPI\n\n# Basic usage\nwith MMIPeriodAPI() as client:\n    response = client.get_data(period=1)\n    print(f\"Current MMI: {response.data.indicator}\")\n    print(f\"Historical days: {len(response.data.days_historical)}\")\n\n# With custom timeout\nwith MMIPeriodAPI(timeout=30) as client:\n    response = client.get_data()  # Uses default period=4\n</code></pre>"},{"location":"tickersnap/mmi/api/#15-response-schema","title":"1.5 Response Schema:","text":"<pre><code>{\n\"success\": true,\n\"data\": {\n    \"date\": \"2025-06-17T05:39:00.065Z\",\n    \"indicator\": 52.02,\n    \"fii\": -101743,\n    \"vix\": -14.45,\n    \"nifty\": 24874.55,\n    \"gold\": 97321,\n    \"daysHistorical\": [...],\n    \"monthsHistorical\": [...]\n}\n}\n</code></pre>"},{"location":"tickersnap/mmi/api/#16-response-fields","title":"1.6 Response Fields:","text":"<ul> <li>success (boolean): API call status</li> <li>data (object): Main payload containing current MMI and historical data</li> <li>data.indicator (float): Current MMI value (0-100)</li> <li>data.daysHistorical (array): Daily historical data points</li> <li>data.monthsHistorical (array): Monthly historical data points</li> </ul>"},{"location":"tickersnap/mmi/api/#2-mmi-now","title":"2. MMI Now","text":""},{"location":"tickersnap/mmi/api/#21-api-details","title":"2.1 API Details:","text":"<p>Retrieve current MMI data with historical comparisons (day, week, month, year).</p> <p>Endpoint: <code>GET /mmi/now</code> Base URL: <code>https://api.tickertape.in</code> Full URL: <code>https://api.tickertape.in/mmi/now</code></p>"},{"location":"tickersnap/mmi/api/#22-parameters","title":"2.2 Parameters:","text":"<p>None required.</p>"},{"location":"tickersnap/mmi/api/#23-request-example","title":"2.3 Request Example:","text":"<pre><code>curl -X GET \"https://api.tickertape.in/mmi/now\"\n</code></pre>"},{"location":"tickersnap/mmi/api/#24-python-usage","title":"2.4 Python Usage:","text":"MMINowAPI <pre><code>from tickersnap.mmi import MMINowAPI\n\n# Basic usage\nwith MMINowAPI() as client:\n    response = client.get_data()\n    print(f\"Current MMI: {response.data.current_value}\")\n    print(f\"Last week MMI: {response.data.last_week.indicator}\")\n    print(f\"Change from last month: {response.data.indicator - response.data.last_month.indicator:.2f}\")\n\n# Manual client management\nclient = MMINowAPI()\ntry:\n    response = client.get_data()\n    # Process response...\nfinally:\n    client.close()\n</code></pre>"},{"location":"tickersnap/mmi/api/#25-response-schema","title":"2.5 Response Schema:","text":"<pre><code>{\n\"success\": true,\n\"data\": {\n    \"date\": \"2025-06-17T05:39:00.065Z\",\n    \"currentValue\": 52.02,\n    \"indicator\": 52.02,\n    \"lastDay\": {...},\n    \"lastWeek\": {...},\n    \"lastMonth\": {...},\n    \"lastYear\": {...},\n    \"daily\": [...]\n}\n}\n</code></pre>"},{"location":"tickersnap/mmi/api/#26-response-fields","title":"2.6 Response Fields:","text":"<ul> <li>success (boolean): API call status  </li> <li>data (object): Main payload with current and comparison data</li> <li>data.currentValue (float): Current MMI value (0-100)</li> <li>data.lastDay (object): Previous trading day data</li> <li>data.lastWeek (object): Data from one week ago</li> <li>data.lastMonth (object): Data from one month ago</li> <li>data.lastYear (object): Data from one year ago</li> <li>data.daily (array): Daily MMI time series</li> </ul>"},{"location":"tickersnap/mmi/api/#error-handling","title":"Error Handling","text":"<p>1 HTTP Status Codes:</p> Code Description Response 200 Success Valid JSON response with data 4xx Client Error Error message in response.text 5xx Server Error Error message in response.text <p>2 Python Exception Types:</p> <pre><code># Parameter validation error\nValueError: Period must be between 1 and 10, got 15\n\n# HTTP request errors  \nException: HTTP 404 error: Not Found\nException: Request failed: Connection timeout\n\n# Response validation errors\nException: Data validation error: Field 'indicator' missing\n</code></pre> <p>3 Error Handling Example:</p> <pre><code>from tickersnap.mmi import MMIPeriodAPI\n\ntry:\n    with MMIPeriodAPI() as client:\n        response = client.get_data(period=15)  # Invalid period\nexcept ValueError as e:\n    print(f\"Parameter error: {e}\")\nexcept Exception as e:\n    print(f\"API error: {e}\")\n</code></pre>"},{"location":"tickersnap/mmi/api/#client-configuration","title":"Client Configuration","text":"Timeout SettingsConnection Management <pre><code># Default timeout: 10 seconds\nclient = MMIPeriodAPI()\n\n# Custom timeout: 30 seconds  \nclient = MMIPeriodAPI(timeout=30)\n\n# For slower connections\nclient = MMINowAPI(timeout=60)\n</code></pre> <pre><code># Context manager (recommended)\nwith MMIPeriodAPI() as client:\n    response = client.get_data()\n    # Client automatically closed\n\n# Manual management\nclient = MMIPeriodAPI()\ntry:\n    response = client.get_data()\nfinally:\n    client.close()  # Important: always close\n</code></pre>"},{"location":"tickersnap/mmi/api/#usage-examples","title":"Usage Examples","text":"Real-time MonitoringHistorical AnalysisData Comparison <pre><code>import time\nfrom tickersnap.mmi import MMINowAPI\n\ndef monitor_mmi():\n    while True:\n        client = MMINowAPI()\n        response = client.get_data()\n        mmi = response.data.current_value\n        client.close()\n\n        if mmi &lt;= 30:\n            print(f\"\ud83d\udfe2 EXTREME FEAR: MMI {mmi:.2f}\")\n            print(f\"      good time to buy stocks!\")\n        elif mmi &gt;= 70:\n            print(f\"\ud83d\udd34 EXTREME GREED: MMI {mmi:.2f}\")\n            print(f\"      avoid fresh positions!\")\n        else:\n            print(f\"\u26aa NEUTRAL Zone: MMI {mmi:.2f}\")\n            print(f\"      observe market conditions\")\n\n        # check every day at 12:00 AM\n        time.sleep(24 * 60 * 60)\n</code></pre> <pre><code>from tickersnap.mmi import MMIPeriodAPI\n\ndef analyze_trend():\n    with MMIPeriodAPI() as client:\n        # get 10 days of data\n        response = client.get_data(period=10)\n\n        # current vs historical average\n        current = response.data.indicator\n        historical = [day.indicator for day in response.data.days_historical]\n        avg_historical = sum(historical) / len(historical)\n\n        print(f\"Current MMI: {current:.1f}\")\n        print(f\"Historical Avg: {avg_historical:.1f}\")\n        print(f\"Trend: {'\ud83d\udcc8 Rising' if current &gt; avg_historical else '\ud83d\udcc9 Falling'}\")\n</code></pre> <pre><code>from tickersnap.mmi import MMINowAPI\n\ndef compare_periods():\n    with MMINowAPI() as client:\n        response = client.get_data()\n        data = response.data\n\n        comparisons = {\n            \"vs Yesterday\": data.indicator - data.last_day.indicator,\n            \"vs Last Week\": data.indicator - data.last_week.indicator, \n            \"vs Last Month\": data.indicator - data.last_month.indicator,\n            \"vs Last Year\": data.indicator - data.last_year.indicator\n        }\n\n        print(f\"Current MMI: {data.current_value:.1f}\")\n        for period, change in comparisons.items():\n            direction = \"\ud83d\udcc8\" if change &gt; 0 else \"\ud83d\udcc9\" if change &lt; 0 else \"\u27a1\ufe0f\"\n            print(f\"{period}: {direction} {change:+.1f}\")\n</code></pre>"},{"location":"tickersnap/mmi/api/#rate-limiting-best-practices","title":"Rate Limiting &amp; Best Practices","text":""},{"location":"tickersnap/mmi/api/#recommended-intervals","title":"Recommended Intervals","text":"<ul> <li>Real-time monitoring: Every 5-15 minutes</li> <li>Historical analysis: Once per hour</li> <li>Batch processing: Implement delays between requests</li> </ul> Client ReuseError Recovery <p>\u2705 Good: Reuse client for multiple calls</p> <pre><code>with MMIPeriodAPI() as client:\n    for period in [1, 2, 3]:\n        response = client.get_data(period=period)\n        # process response...\n</code></pre> <p>\u274c Avoid: Creating new client for each call  </p> <pre><code>for period in [1, 2, 3]:\n    with MMIPeriodAPI() as client:\n        response = client.get_data(period=period)\n</code></pre> <pre><code>import time\nfrom tickersnap.mmi import MMINowAPI\n\ndef robust_data_fetch(retries=3):\n    for attempt in range(retries):\n        try:\n            with MMINowAPI(timeout=30) as client:\n                return client.get_data()\n        except Exception as e:\n            if attempt == retries - 1:\n                raise e\n            print(f\"Attempt {attempt + 1} failed: {e}\")\n            time.sleep(2 ** attempt)  # exponential backoff\n</code></pre>"},{"location":"tickersnap/mmi/api/#tickersnap.mmi.api","title":"<code>tickersnap.mmi.api</code>","text":"<p>Tickersnap Market Mood Index (MMI) Client</p> <p>A module for accessing Market Mood Index data from the Tickertape API.</p> <p>This module provides a streamlined way to fetch, process, and work with MMI data, while maintaining the integrity of the original API responses, as well as providing a utility-focused classes and functions to work with MMI data.</p> Features <ul> <li>Simplified data access through intuitive classes and functions</li> <li>Comprehensive MMI data retrieval including historical data</li> <li>Preserve and access the original tickertape API response structure</li> <li>Utility-focused design from tickersnap for simple workflow with MMI data</li> </ul>"},{"location":"tickersnap/mmi/api/#tickersnap.mmi.api.MMIPeriodAPI","title":"<code>MMIPeriodAPI</code>","text":"<p>Client for fetching Market Mood Index (MMI) data for specified periods.</p> <p>Supports fetching current MMI data along with historical data (days and months) for periods ranging from 1 to 10 data points.</p> <ul> <li>BASE_URL: \"https://analyze.api.tickertape.in/homepage/mmi?period=4\"</li> </ul> Example <pre><code># Using as a client object (don't forget to close)\nmmi = MMIPeriodAPI()\ndata = mmi.get_data(period=1)\nprint(data.data.indicator)\nmmi.close()\n</code></pre> <pre><code># Using as context manager (automatically closed)\nwith MMIPeriodAPI() as mmi:\n    data = mmi.get_data(period=1)\n    print(data.data.indicator)\n</code></pre>"},{"location":"tickersnap/mmi/api/#tickersnap.mmi.api.MMIPeriodAPI.__init__","title":"<code>__init__(timeout=10)</code>","text":"<p>Initialize the MMI Period client.</p> <p>Parameters:</p> Name Type Description Default <code>timeout</code> <code>int</code> <p>Request timeout in seconds. Defaults to 10.</p> <code>10</code>"},{"location":"tickersnap/mmi/api/#tickersnap.mmi.api.MMIPeriodAPI.__enter__","title":"<code>__enter__()</code>","text":"<p>Context manager entry.</p>"},{"location":"tickersnap/mmi/api/#tickersnap.mmi.api.MMIPeriodAPI.__exit__","title":"<code>__exit__(exc_type, exc_val, exc_tb)</code>","text":"<p>Context manager exit.</p>"},{"location":"tickersnap/mmi/api/#tickersnap.mmi.api.MMIPeriodAPI.close","title":"<code>close()</code>","text":"<p>Close the HTTP client.</p>"},{"location":"tickersnap/mmi/api/#tickersnap.mmi.api.MMIPeriodAPI.get_data","title":"<code>get_data(period=None)</code>","text":"<p>Fetch MMI data for the specified period.</p> <p>Parameters:</p> Name Type Description Default <code>period</code> <code>Optional[int]</code> <p>Number of historical data points to fetch (1-10). Defaults to DEFAULT_PERIOD (4) if not specified.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>MMIPeriodResponse</code> <code>MMIPeriodResponse</code> <p>Parsed API response containing current and historical MMI data.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If period is not between MIN_PERIOD and MAX_PERIOD.</p> <code>Exception</code> <p>If HTTP request fails or data validation fails.</p>"},{"location":"tickersnap/mmi/api/#tickersnap.mmi.api.MMINowAPI","title":"<code>MMINowAPI</code>","text":"<p>Client for fetching the current Market Mood Index (MMI) data.</p> <p>Supports fetching the full MMI information at present, along with single data points on last date, last week, last month, and last year.</p> <ul> <li>BASE_URL: https://api.tickertape.in/mmi/now</li> </ul>"},{"location":"tickersnap/mmi/api/#tickersnap.mmi.api.MMINowAPI.__init__","title":"<code>__init__(timeout=10)</code>","text":"<p>Initialize the MMI Now client.</p> <p>Parameters:</p> Name Type Description Default <code>timeout</code> <code>int</code> <p>Request timeout in seconds. Defaults to 10.</p> <code>10</code>"},{"location":"tickersnap/mmi/api/#tickersnap.mmi.api.MMINowAPI.__enter__","title":"<code>__enter__()</code>","text":"<p>Context manager entry.</p>"},{"location":"tickersnap/mmi/api/#tickersnap.mmi.api.MMINowAPI.__exit__","title":"<code>__exit__(exc_type, exc_val, exc_tb)</code>","text":"<p>Context manager exit.</p>"},{"location":"tickersnap/mmi/api/#tickersnap.mmi.api.MMINowAPI.close","title":"<code>close()</code>","text":"<p>Close the HTTP client.</p>"},{"location":"tickersnap/mmi/api/#tickersnap.mmi.api.MMINowAPI.get_data","title":"<code>get_data()</code>","text":"<p>Fetch the current MMI data.</p> <p>Returns:</p> Name Type Description <code>MMINowResponse</code> <code>MMINowResponse</code> <p>Parsed API response containing current and past stats of MMI.</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If HTTP request fails or data validation fails.</p>"},{"location":"tickersnap/mmi/mmi/","title":"Market Mood Index","text":"<p>A high-level Python interface for accessing Tickertape's Market Mood Index (MMI) data with simplified, user-friendly methods.</p> <p>It provides simple functions to automate or programatically get the current MMI value, trends, and changes for daily market analysis, with no headache of complex API handling, and distraction free excessive data fields knowledge!</p> <p>Disclaimer</p> <p>MMI is a sentiment tool for informational purposes only. Not financial advice. Always consult qualified financial advisors before making investment decisions.</p>"},{"location":"tickersnap/mmi/mmi/#overview","title":"Overview","text":"<p>The <code>MarketMoodIndex</code> class provides a clean, intuitive API for accessing MMI data without dealing with complex API responses or field mappings. Perfect for automation, programmatic daily market analysis, trading strategies, and financial applications.</p> <p>Key Features:</p> <ul> <li>\u2705 Simple MMI data access - No complex API handling required</li> <li>\u2705 Zone classification - Automatic Fear/Greed zone calculation  </li> <li>\u2705 Trend analysis - Historical data for charting and analysis</li> <li>\u2705 Comparison data - Easy period-over-period comparisons</li> <li>\u2705 Error handling - Robust timeout and retry capabilities</li> <li>\u2705 Extensive Test Coverage - A robust CI/CD pipeline to identify changes in Tickertape API.</li> </ul>"},{"location":"tickersnap/mmi/mmi/#quick-start","title":"Quick Start","text":"<p>See MMI Data</p> <pre><code>from tickersnap.mmi import MarketMoodIndex\n\n# Initialize MMI client\nmmi = MarketMoodIndex()\n\n# Get current MMI with zone\ncurrent = mmi.get_current_mmi()\nprint(f\"MMI: {current.value:.1f} ({current.zone})\")\n\n# Get trends for analysis  \ntrends = mmi.get_mmi_trends()\nprint(f\"Current: {trends.current.value:.1f}\")\nprint(f\"10-day trend: {', '.join(f'{day.value:.1f}' for day in trends.last_10_days)}\")\n\n# Get comparison data\nchanges = mmi.get_mmi_changes()\nprint(f\"vs Yesterday: {changes.vs_last_day:+.1f}\")\nprint(f\"vs Last Month: {changes.vs_last_month:+.1f}\")\n</code></pre>"},{"location":"tickersnap/mmi/mmi/#core-methods","title":"Core Methods","text":"Current MMI ValueHistorical TrendsPeriod Comparisons <p>Get the current Market Mood Index with automatic zone classification.</p> <p>Function Signature</p> <pre><code>def get_current_mmi() -&gt; MMICurrent\n</code></pre> <p>Returns</p> <ul> <li>Current MMI value (0-100)</li> <li>Zone classification</li> <li>Timestamp</li> </ul> <p>Example</p> <pre><code>mmi = MarketMoodIndex()\ncurrent = mmi.get_current_mmi()\n\nprint(f\"Date: {current.date}\")\nprint(f\"MMI: {current.value:.1f}\")\nprint(f\"Zone: {current.zone}\")  # EXTREME_FEAR, FEAR, GREED, EXTREME_GREED\n\n# Zone-based trading logic\nif current.zone == \"Extreme Fear\":\n    print(\"\ud83d\udfe2 Good time to buy!\")\nelif current.zone == \"Extreme Greed\":  \n    print(\"\ud83d\udd34 Avoid fresh positions!\")\nelse:\n    print(\"\u26aa Monitor trend\")\n</code></pre> <p>Get MMI trend data for charting and analysis (10 days + 10 months).</p> <p>Function Signature</p> <pre><code>def get_mmi_trends() -&gt; MMITrends\n</code></pre> <p>Returns</p> <ul> <li>Current MMI value</li> <li>Historical data series for trend analysis</li> </ul> <p>Example</p> <pre><code>mmi = MarketMoodIndex()\ntrends = mmi.get_mmi_trends()\n\n# Current vs historical analysis\ncurrent = trends.current.value\ndaily_avg = sum(day.value for day in trends.last_10_days) / len(trends.last_10_days)\n\nprint(f\"Current MMI: {current:.1f}\")\nprint(f\"10-day average: {daily_avg:.1f}\")\nprint(f\"Trend: {'\ud83d\udcc8 Rising' if current &gt; daily_avg else '\ud83d\udcc9 Falling'}\")\n\n# Chart data preparation (last 10 days)\ndates = [day.date for day in trends.last_10_days]\nvalues = [day.value for day in trends.last_10_days]\n\n# Chart data preparation (last 10 months)\ndates = [month.date for month in trends.last_10_months]\nvalues = [month.value for month in trends.last_10_months]\n</code></pre> <p>Get MMI changes vs previous periods (day, week, month, year).</p> <p>Function Signature</p> <pre><code>def get_mmi_changes() -&gt; MMIChanges\n</code></pre> <p>Returns</p> <ul> <li>Current MMI value</li> <li>Historical MMI values with built-in comparison properties</li> </ul> <p>Example</p> <pre><code>mmi = MarketMoodIndex()\nchanges = mmi.get_mmi_changes()\n\n# Quick comparisons\nprint(f\"Current MMI: {changes.current.value:.1f}\")\nprint(f\"vs Yesterday: {changes.vs_last_day:+.1f}\")\nprint(f\"vs Last Week: {changes.vs_last_week:+.1f}\")\nprint(f\"vs Last Month: {changes.vs_last_month:+.1f}\")\nprint(f\"vs Last Year: {changes.vs_last_year:+.1f}\")\n\n# Programmatic comparison\nfor period in [\"day\", \"week\", \"month\", \"year\"]:\n    change = changes.vs_last(period)\n    direction = \"\ud83d\udcc8\" if change &gt; 0 else \"\ud83d\udcc9\" if change &lt; 0 else \"\u27a1\ufe0f\"\n    print(f\"vs {period.title()}: {direction} {change:+.1f}\")\n</code></pre>"},{"location":"tickersnap/mmi/mmi/#configuration","title":"Configuration","text":"Timeout SettingsError Handling <p>Set the HTTP request timeout for the underlying API.</p> <p>Example</p> <pre><code># Default timeout (10 seconds)\nmmi = MarketMoodIndex()\n\n# Custom timeout for slower connections\nmmi = MarketMoodIndex(timeout=30)\n</code></pre> <p>Handle errors gracefully.</p> <p>Example</p> <pre><code>from tickersnap.mmi import MarketMoodIndex\n\ntry:\n    mmi = MarketMoodIndex(timeout=30)\n    current = mmi.get_current_mmi()\n    print(f\"MMI: {current.value:.1f} ({current.zone})\")\nexcept Exception as e:\n    print(f\"Failed to fetch MMI data: {e}\")\n</code></pre>"},{"location":"tickersnap/mmi/mmi/#usage-examples","title":"Usage Examples","text":"Daily Trading StrategyHistorical AnalysisReal-time MonitoringAdvanced Usage <p>Generate daily buy/sell signals based on MMI.</p> <p>Example</p> <pre><code>from tickersnap.mmi import MarketMoodIndex\n\ndef daily_market_signal():\n    \"\"\"Generate daily buy/sell signals based on MMI.\"\"\"\n\n    mmi = MarketMoodIndex()\n\n    try:\n        current = mmi.get_current_mmi()\n        changes = mmi.get_mmi_changes()\n\n        # Signal logic\n        if current.zone == \"Extreme Fear\":\n            signal = \"\ud83d\udfe2 BUY SIGNAL\"\n        elif current.zone == \"Extreme Greed\":\n            signal = \"\ud83d\udd34 SELL SIGNAL\"\n        else:\n            signal = \"\u26aa HOLD/MONITOR\"\n\n        # Trend confirmation\n        trend = \"Rising\" if changes.vs_last_week &gt; 0 else \"Falling\"\n\n        print(f\"MMI: {current.value:.1f} ({current.zone})\")\n        print(f\"Signal: {signal}\")\n        print(f\"Weekly Trend: {trend} ({changes.vs_last_week:+.1f})\")\n\n    except Exception as e:\n        print(f\"Error: {e}\")\n\n# Run daily at market open or use a cron job\ndaily_market_signal()\n</code></pre> <p>Analyze MMI patterns for research.</p> <p>Example</p> <pre><code>def analyze_mmi_patterns():\n    \"\"\"Analyze MMI patterns for research.\"\"\"\n    mmi = MarketMoodIndex()\n\n    # Get comprehensive data\n    trends = mmi.get_mmi_trends()\n    changes = mmi.get_mmi_changes()\n\n    # Calculate statistics\n    daily_values = [day.value for day in trends.last_10_days]\n    monthly_values = [month.value for month in trends.last_10_months]\n\n    daily_avg = sum(daily_values) / len(daily_values)\n    monthly_avg = sum(monthly_values) / len(monthly_values)\n\n    # Volatility analysis\n    daily_range = max(daily_values) - min(daily_values)\n\n    print(f\"\ud83d\udcca MMI Analysis Report\")\n    print(f\"Current: {trends.current.value:.1f}\")\n    print(f\"10-day avg: {daily_avg:.1f}\")\n    print(f\"10-month avg: {monthly_avg:.1f}\")\n    print(f\"Daily volatility: {daily_range:.1f}\")\n    print(f\"YoY change: {changes.vs_last_year:+.1f}\")\n\nanalyze_mmi_patterns()\n</code></pre> <p>Monitor MMI for extreme readings.</p> <p>Example</p> <pre><code>import time\nfrom datetime import datetime\n\ndef monitor_mmi_alerts():\n    \"\"\"Monitor MMI for extreme readings.\"\"\"\n    mmi = MarketMoodIndex()\n\n    while True:\n        try:\n            current = mmi.get_current_mmi()\n            changes = mmi.get_mmi_changes()\n\n            # Extreme zone alerts\n            if current.value &lt;= 25:\n                print(f\"\ud83d\udea8 EXTREME FEAR ALERT: MMI {current.value:.1f}\")\n                print(f\"   Last seen this low: Check historical data\")\n\n            elif current.value &gt;= 75:\n                print(f\"\ud83d\udea8 EXTREME GREED ALERT: MMI {current.value:.1f}\")\n                print(f\"   Market may be overheated\")\n\n            # Large change alerts  \n            if abs(changes.vs_last_day) &gt; 10:\n                direction = \"jumped\" if changes.vs_last_day &gt; 0 else \"dropped\"\n                print(f\"\ud83d\udcc8 LARGE MOVE: MMI {direction} {abs(changes.vs_last_day):.1f} points\")\n\n            print(f\"[{datetime.now().strftime('%H:%M')}] MMI: {current.value:.1f}\")\n\n        except Exception as e:\n            print(f\"Error: {e}\")\n\n        # Check every 15 minutes during market hours\n        time.sleep(15 * 60)\n\n# monitor_mmi_alerts()  # uncomment to run\n</code></pre> <p>For advanced users who need access to all API fields (from tickertape API). See API for more details and Models for data field details.</p> <p>Example</p> <pre><code># Raw API data (all fields)\nraw_current = mmi.get_raw_current_data()\nraw_period = mmi.get_raw_period_data(period=5)\n\nprint(f\"FII flows: \u20b9{raw_current.fii} crores\")\nprint(f\"Nifty: {raw_current.nifty:.1f}\")\nprint(f\"VIX: {raw_current.vix:.1f}\")\n</code></pre> <p>Note</p> <p>For daily usage, prefer the simplified methods (<code>get_current_mmi</code>, <code>get_mmi_trends</code>, <code>get_mmi_changes</code>).</p>"},{"location":"tickersnap/mmi/mmi/#data-models","title":"Data Models","text":"Model Description Key Fields <code>MMICurrent</code> Current MMI with zone <code>value</code>, <code>zone</code>, <code>date</code> <code>MMITrends</code> Historical trend data <code>current</code>, <code>last_10_days</code>, <code>last_10_months</code> <code>MMIChanges</code> Period comparisons <code>current</code>, <code>vs_last_day</code>, <code>vs_last_week</code>, etc. <code>MMIDataPoint</code> Individual data point <code>date</code>, <code>value</code>"},{"location":"tickersnap/mmi/mmi/#mmi-zones","title":"MMI Zones","text":"Zone Range Description Investment Signal Extreme Fear 0-30 Market oversold \ud83d\udfe2 Good time to buy Fear 30-50 Cautious sentiment \u26aa Monitor trend Greed 50-70 Optimistic market \ud83d\udfe1 Consider selling Extreme Greed 70-100 Market euphoria \ud83d\udd34 Avoid fresh positions"},{"location":"tickersnap/mmi/mmi/#tickersnap.mmi.mmi","title":"<code>tickersnap.mmi.mmi</code>","text":"<p>MarketMoodIndex - Daily MMI Data for Market Analysis</p> <p>MMI data that a common user might want to see:</p> <ul> <li>before market opens,</li> <li>in between market hours,</li> <li>after market closes.</li> </ul> <p>Provides 3 key functions:</p> <ul> <li><code>get_current_mmi()</code>: Current MMI value with zone classification</li> <li><code>get_mmi_trends()</code>: MMI trends for charting (10 days + 10 months)</li> <li><code>get_mmi_changes()</code>: MMI changes for comparison analysis</li> </ul>"},{"location":"tickersnap/mmi/mmi/#tickersnap.mmi.mmi.MarketMoodIndex","title":"<code>MarketMoodIndex</code>","text":"<p>Simplified daily usage and utility focused MMI data for market analysis.</p> <p>It removes the Tickertape API complexity and unnecessary field data points, and provides simple functions to get purely the MMI data that a common user might want to see or use for their daily market analysis.</p>"},{"location":"tickersnap/mmi/mmi/#tickersnap.mmi.mmi.MarketMoodIndex.__init__","title":"<code>__init__(timeout=10)</code>","text":"<p>Initialize MarketMoodIndex.</p> <p>Parameters:</p> Name Type Description Default <code>timeout</code> <code>int</code> <p>Request timeout in seconds. Defaults to 10.</p> <code>10</code>"},{"location":"tickersnap/mmi/mmi/#tickersnap.mmi.mmi.MarketMoodIndex.get_current_mmi","title":"<code>get_current_mmi()</code>","text":"<p>Get current MMI value with zone classification.</p> <p>Returns:</p> Name Type Description <code>MMICurrent</code> <code>MMICurrent</code> <p>Current MMI value, zone, and date.</p>"},{"location":"tickersnap/mmi/mmi/#tickersnap.mmi.mmi.MarketMoodIndex.get_mmi_trends","title":"<code>get_mmi_trends()</code>","text":"<p>Get MMI trend series data for graphing and analysis.</p> <p>Fetches the current MMI + last 10 days + last 10 months of data, which can be useful for trend analysis and graphing.</p> <p>Returns:</p> Name Type Description <code>MMITrends</code> <code>MMITrends</code> <p>Current MMI + last 10 days + last 10 months of historical data.</p>"},{"location":"tickersnap/mmi/mmi/#tickersnap.mmi.mmi.MarketMoodIndex.get_mmi_changes","title":"<code>get_mmi_changes()</code>","text":"<p>Get MMI comparison data against aggregated historical periods.</p> <p>Provides current MMI value along with values from last day, last week, last month, and last year for comparison or delta change analysis.</p> <p>Returns:</p> Name Type Description <code>MMIChanges</code> <code>MMIChanges</code> <p>Current and historical MMI values with comparison properties.</p>"},{"location":"tickersnap/mmi/mmi/#tickersnap.mmi.mmi.MarketMoodIndex.get_raw_current_data","title":"<code>get_raw_current_data()</code>","text":"<p>Get raw tickertape api response for current MMI data.</p> Disclaimer <ul> <li>Advanced users only - contains all API fields.</li> <li>For daily use, prefer <code>get_mmi_changes()</code> instead.</li> </ul> <p>Returns:</p> Name Type Description <code>MMINowData</code> <code>MMINowData</code> <p>raw data returned by Tickertape API.</p>"},{"location":"tickersnap/mmi/mmi/#tickersnap.mmi.mmi.MarketMoodIndex.get_raw_period_data","title":"<code>get_raw_period_data(period=4)</code>","text":"<p>Get raw tickertape api response for MMI data over a period.</p> Disclaimer <ul> <li>Advanced users only - contains all API fields.</li> <li>For daily use, prefer <code>get_mmi_trends()</code> instead.</li> </ul> <p>Parameters:</p> Name Type Description Default <code>period</code> <code>int</code> <p>Number of days and months to fetch. Defaults to 4.</p> <code>4</code> <p>Returns:</p> Name Type Description <code>MMIPeriodData</code> <code>MMIPeriodData</code> <p>raw data returned by Tickertape API.</p>"},{"location":"tickersnap/mmi/models/","title":"Models","text":""},{"location":"tickersnap/mmi/models/#details-and-summary","title":"Details and Summary","text":"<ul> <li>Tickertape Models: Pydantic models to hold and map the Tickertape API response, acting as a schema for the response.</li> <li>Tickersnap Models: Pydantic models to hold <code>Tickersnap</code> defined models, to work easily with the library data.</li> </ul> Tickertape Models (API Response)Tickersnap Models (Library Datatypes)"},{"location":"tickersnap/mmi/models/#mmi-period","title":"MMI Period","text":"<ul> <li>Main model: <code>MMIPeriodResponse</code></li> <li>Depends on: <code>MMIPeriodData</code>, <code>HistoricalData</code><ul> <li><code>MMIPeriodData</code>: holds the main MMI data</li> <li><code>HistoricalData</code>: holds the historical data</li> </ul> </li> </ul>"},{"location":"tickersnap/mmi/models/#mmi-now","title":"MMI Now","text":"<ul> <li>Main model: <code>MMINowResponse</code></li> <li>Depends on: <code>MMINowData</code>, <code>HistoricalData</code>, <code>DailyData</code><ul> <li><code>MMINowData</code>: holds the main MMI data</li> <li><code>HistoricalData</code>: holds the historical data</li> <li><code>DailyData</code>: holds the daily data</li> </ul> </li> </ul>"},{"location":"tickersnap/mmi/models/#mmi-current","title":"MMI Current","text":"<ul> <li>Main model: <code>MMICurrent</code></li> <li>Depends on: <code>MMIZone</code><ul> <li><code>MMIZone</code>: holds the MMI zone enum</li> </ul> </li> </ul>"},{"location":"tickersnap/mmi/models/#mmi-trends","title":"MMI Trends","text":"<ul> <li>Main model: <code>MMITrends</code></li> <li>Depends on: <code>MMIDataPoint</code><ul> <li><code>MMIDataPoint</code>: holds the MMI data point (date and value)</li> </ul> </li> </ul>"},{"location":"tickersnap/mmi/models/#mmi-changes","title":"MMI Changes","text":"<ul> <li>Main model: <code>MMIChanges</code></li> <li>Depends on: <code>MMIDataPoint</code><ul> <li><code>MMIDataPoint</code>: holds the MMI data point (date and value)</li> </ul> </li> </ul>"},{"location":"tickersnap/mmi/models/#usage","title":"Usage","text":"Model Source API / Used By Description Usage For Public? <code>MMIPeriodResponse</code> (GET) analyze /homepage/mmi MMI data for a given period get mmi data + historic data in series \u2705 <code>MMINowResponse</code> (GET) api /mmi/now Current MMI data current mmi data + past data for comparison \u2705 <code>MMIPeriodData</code> <code>MMIPeriodResponse</code> holds main data payload (internal use) \u274c <code>MMINowData</code> <code>MMINowResponse</code> holds the main MMI data (internal use) \u274c <code>DailyData</code> <code>MMINowData</code> holds the daily data (internal use) \u274c <code>HistoricalData</code> <code>MMIPeriodData</code>, <code>MMINowData</code> holds the historical data (internal use) \u274c"},{"location":"tickersnap/mmi/models/#mmi-zones","title":"MMI Zones","text":"<ul> <li>0-30: Extreme Fear (Good time to buy)</li> <li>30-50: Fear (Monitor trend)</li> <li>50-70: Greed (Consider selling)</li> <li>70-100: Extreme Greed (Avoid fresh positions)</li> </ul>"},{"location":"tickersnap/mmi/models/#field-reference","title":"Field Reference","text":"<p>Below is a combined reference for all the fields found in all the API related (tickertape) models, grouped by logical sections:</p> Model Fields Reference"},{"location":"tickersnap/mmi/models/#1-core-mmi-data","title":"1. Core MMI Data:","text":"Field Full Form Type Range/Format Description <code>indicator</code> Market Mood Indicator <code>float</code> 0-100 Final MMI sentiment value (0=Extreme Fear, 100=Extreme Greed) <code>raw</code> Raw MMI Value <code>float</code> varies Raw MMI calculation before smoothing/normalization <code>current_value</code> Current MMI Value <code>float</code> 0-100 Current MMI value (same as indicator in MMINowAPI)"},{"location":"tickersnap/mmi/models/#2-market-sentiment-factors","title":"2. Market Sentiment Factors:","text":"Field Full Form Type Range/Format Description <code>fii</code> Foreign Institutional Investor <code>int</code> negative/positive FII net flows in \u20b9 crores (negative=selling, positive=buying) <code>vix</code> Volatility Index <code>float</code> varies India VIX volatility index (market fear gauge) <code>skew</code> Options Skew <code>float</code> varies Options skew indicating market direction expectations <code>momentum</code> Price Momentum <code>float</code> varies Price momentum using moving average ratios <code>extrema</code> Market Extrema <code>float</code> 0-1 Market breadth ratio (52-week highs vs lows) <code>trin</code> Trading Index <code>float</code> varies TRIN (advance/decline + volume ratio) <code>gold_on_nifty</code> Gold to Nifty Ratio <code>float</code> varies Gold vs Nifty performance ratio (safe haven demand)"},{"location":"tickersnap/mmi/models/#3-market-data","title":"3. Market Data:","text":"Field Full Form Type Range/Format Description <code>nifty</code> Nifty 50 Index <code>float</code> 20,000-30,000 Current Nifty 50 index value <code>gold</code> Gold Price <code>int</code> 60,000-100,000+ Gold price per 10g in \u20b9 <code>fma</code> Fast Moving Average <code>float</code> positive Fast Moving Average of Nifty <code>sma</code> Slow Moving Average <code>float</code> positive Slow Moving Average of Nifty"},{"location":"tickersnap/mmi/models/#4-timestamps","title":"4. Timestamps:","text":"Field Full Form Type Range/Format Description <code>date</code> Date/Time <code>datetime</code> ISO format Data timestamp in UTC"},{"location":"tickersnap/mmi/models/#5-response-structure","title":"5. Response Structure:","text":"Field Full Form Type Range/Format Description <code>success</code> Success Status <code>bool</code> true/false API response success indicator <code>data</code> Data Payload <code>object</code> - Main data payload container"},{"location":"tickersnap/mmi/models/#6-historical-arrays","title":"6. Historical Arrays:","text":"Field Full Form Type Range/Format Description <code>days_historical</code> Daily Historical Data <code>List[HistoricalData]</code> 1-10 items Historical daily MMI data points <code>months_historical</code> Monthly Historical Data <code>List[HistoricalData]</code> 1-10 items Historical monthly MMI data points <code>daily</code> Daily Data Series <code>List[DailyData]</code> varies Daily MMI value time series"},{"location":"tickersnap/mmi/models/#7-comparison-fields-mminowapi-only","title":"7. Comparison Fields (MMINowAPI only):","text":"Field Full Form Type Range/Format Description <code>last_day</code> Previous Day Data <code>HistoricalData</code> - MMI data from previous trading day <code>last_week</code> Previous Week Data <code>HistoricalData</code> - MMI data from one week ago <code>last_month</code> Previous Month Data <code>HistoricalData</code> - MMI data from one month ago <code>last_year</code> Previous Year Data <code>HistoricalData</code> - MMI data from one year ago"},{"location":"tickersnap/mmi/models/#tickersnap.mmi.models","title":"<code>tickersnap.mmi.models</code>","text":""},{"location":"tickersnap/mmi/models/#tickersnap.mmi.models.HistoricalData","title":"<code>HistoricalData</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents historical data points of Market Mood Index (MMI).</p> <p>This model follows tickertape API response's schema for historical MMI data. There are various APIs that returns historic data for day, month, year, etc. The schema matches the response structure for all such APIs.</p> Note <ul> <li>internal use only</li> <li>used by models: <code>MMIPeriodData</code> and <code>MMINowData</code></li> </ul>"},{"location":"tickersnap/mmi/models/#tickersnap.mmi.models.MMIPeriodData","title":"<code>MMIPeriodData</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents response data from <code>analyze.api.tickertape.in/homepage/mmi?period={period}</code> endpoint.</p> <p>It contains the full MMI information at present, along with historic data (day and month only) for the given period (1 to 10).</p> Note <ul> <li>internal use only</li> <li>used by models: <code>MMIPeriodResponse</code></li> </ul>"},{"location":"tickersnap/mmi/models/#tickersnap.mmi.models.MMIPeriodResponse","title":"<code>MMIPeriodResponse</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents API response payload from <code>analyze.api.tickertape.in/homepage/mmi?period={period}</code> endpoint.</p> <p>It contains the full MMI information at present, along with historic data (day and month only) for the given period (1 to 10).</p> Note <ul> <li>best used for getting historic data for a given period.</li> <li>only supports day and month data upto 10 data points max.</li> <li>can be used for observing trends in MMI over time.</li> </ul> Reference <ul> <li>HTTP Request: GET</li> <li>URL: https://analyze.api.tickertape.in/homepage/mmi?period={period}<ul> <li>where <code>period</code> is a integer number between 1 and 10.</li> </ul> </li> <li>Response Body: <code>MMIPeriodResponse</code></li> </ul>"},{"location":"tickersnap/mmi/models/#tickersnap.mmi.models.DailyData","title":"<code>DailyData</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents daily MMI now data point with value and date.</p> Note <ul> <li>internal use only</li> <li>used by models: <code>MMINowData</code></li> </ul>"},{"location":"tickersnap/mmi/models/#tickersnap.mmi.models.MMINowData","title":"<code>MMINowData</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents response data from <code>api.tickertape.in/mmi/now</code> endpoint.</p> <p>It contains the full MMI information at present, along with single data points on last date, last week, last month, and last year.</p> Note <ul> <li>internal use only</li> <li>used by models: <code>MMINowResponse</code></li> </ul>"},{"location":"tickersnap/mmi/models/#tickersnap.mmi.models.MMINowResponse","title":"<code>MMINowResponse</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents API response payload from <code>api.tickertape.in/mmi/now</code> endpoint.</p> <p>It contains the full MMI information at present, along with single data points on last date, last week, last month, and last year.</p> Note <ul> <li>best used for getting current MMI value.</li> <li>can be used for comparing current MMI with     last date, last week, last month, and last year.</li> </ul> Reference <ul> <li>HTTP Request: GET</li> <li>URL: https://api.tickertape.in/mmi/now</li> <li>Response Body: <code>MMINowResponse</code></li> </ul>"},{"location":"tickersnap/mmi/models/#tickersnap.mmi.models.MMIZone","title":"<code>MMIZone</code>","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>Market Mood Index zones based on indicator value ranges:</p> <ul> <li><code>00-30</code>: Extreme Fear</li> <li><code>30-50</code>: Fear</li> <li><code>50-70</code>: Greed</li> <li><code>70-100</code>: Extreme Greed</li> </ul>"},{"location":"tickersnap/mmi/models/#tickersnap.mmi.models.MMIZone.calculate_zone","title":"<code>calculate_zone(value)</code>  <code>classmethod</code>","text":"<p>Calculate MMI zone based on indicator value.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>float</code> <p>The MMI indicator value.</p> required <p>Returns:</p> Name Type Description <code>MMIZone</code> <code>MMIZone</code> <p>The MMI zone based on the value.</p>"},{"location":"tickersnap/mmi/models/#tickersnap.mmi.models.MMIDataPoint","title":"<code>MMIDataPoint</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>A single MMI data point with date and value.</p>"},{"location":"tickersnap/mmi/models/#tickersnap.mmi.models.MMICurrent","title":"<code>MMICurrent</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>The current MMI reading right now. contains current MMI value, zone, and date.</p>"},{"location":"tickersnap/mmi/models/#tickersnap.mmi.models.MMITrends","title":"<code>MMITrends</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>MMI trends over time, with consicutive 10 data points. contains current MMI value, date, trends over last 10 days and 10 months.</p>"},{"location":"tickersnap/mmi/models/#tickersnap.mmi.models.MMIChanges","title":"<code>MMIChanges</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>MMI changes with respect to last day, last week, last month, and last year. contains current MMI value, date, and MMI values for last day, last week, last month, and last year.</p>"},{"location":"tickersnap/mmi/models/#tickersnap.mmi.models.MMIChanges.vs_last","title":"<code>vs_last(period)</code>","text":"<p>Get difference vs specified period.</p> <p>Parameters:</p> Name Type Description Default <code>period</code> <code>Literal['day', 'week', 'month', 'year']</code> <p>The period to compare against.</p> required <p>Returns:</p> Name Type Description <code>float</code> <code>float</code> <p>The difference between the current MMI value and the value of the specified period.</p>"},{"location":"tickersnap/stock/","title":"Stock Scorecard","text":"<p>Tickersnap (this python package) provides comprehensive access to stock scorecard data from Tickertape's analysis engine.</p>"},{"location":"tickersnap/stock/#overview","title":"Overview","text":"<p>The Stock Scorecard module evaluates stocks across 6 key categories:</p> <ul> <li>Performance</li> <li>Valuation</li> <li>Growth</li> <li>Profitability</li> <li>Entry Point</li> <li>Red Flags</li> </ul> <p>Get instant insights into any stock's financial health and trading conditions.</p> <p>Note</p> <p>This module sources data from Tickertape's analyze API, providing professional-grade stock evaluation metrics and from professional analysts for 5000+ Indian stocks.</p>"},{"location":"tickersnap/stock/#disclaimers","title":"Disclaimers","text":"<p>Disclaimer</p> <ul> <li>Scorecard data is for informational and analysis purposes only.</li> <li>None of the data provided via this module is my own, but from Tickertape's analyze API.</li> <li>Some stocks may have limited scorecard categories (especially smaller companies and new listings).</li> <li>The <code>sid</code> fields can be used to interact with Tickertape APIs.</li> <li>Combine with Assets List module for powerful automated stock screening!</li> </ul> <p>Disclaimer</p> <p>The stock scorecard data provided through this module is for informational purposes only. Not financial advice. Always consult qualified financial advisors before making investment decisions.</p>"},{"location":"tickersnap/stock/#modules","title":"Modules","text":"Module Description Target Audience For Public Use When to use? Scorecard High-level scorecard analysis General Users \u2705 When you want simplified stock analysis and screening API Raw API access Advanced Users \u2705 When you need direct access to Tickertape's scorecard API Models Data models Internal Use \u274c NA"},{"location":"tickersnap/stock/api/","title":"API Reference","text":""},{"location":"tickersnap/stock/api/#overview","title":"Overview","text":"<p>The Stock Scorecard API provides programmatic access to Tickertape's comprehensive stock analysis data through a single endpoint. This unofficial Python client wraps the Tickertape API with robust error handling, input validation, and response parsing.</p> <p>Base URL and Request Type:</p> API Request Type Base URL Response Type Stock Scorecard GET <code>https://analyze.api.tickertape.in/stocks/scorecard/{sid}</code> JSON (application/json) <p>Headers:</p> <ul> <li>Authentication: None required</li> <li>Rate Limiting: Not specified by Tickertape</li> <li>Response Format: JSON (application/json)</li> </ul>"},{"location":"tickersnap/stock/api/#api-details","title":"API Details","text":"Stock Scorecard Data"},{"location":"tickersnap/stock/api/#1-stock-scorecard","title":"1. Stock Scorecard","text":""},{"location":"tickersnap/stock/api/#11-api-details","title":"1.1 API Details:","text":"<p>Retrieve complete stock scorecard analysis including 6 key categories: Performance, Valuation, Growth, Profitability, Entry Point, and Red Flags.</p> <p>Endpoint: <code>GET /stocks/scorecard/{sid}</code> Base URL: <code>https://analyze.api.tickertape.in</code> Full URL: <code>https://analyze.api.tickertape.in/stocks/scorecard/{sid}</code></p>"},{"location":"tickersnap/stock/api/#12-parameters","title":"1.2 Parameters:","text":"Parameter Type Required Format Description <code>sid</code> string Yes alphanumeric Stock Security ID as used by Tickertape (e.g., \"TCS\", \"RELI\", \"INFY\") <p>SID Examples: - Large Cap: TCS, RELI, INFY, HDFC - Mid Cap: BAJFINANCE, TITAN, ASIANPAINT - Small Cap: INDL, ELLE, ATE, OSWAP</p>"},{"location":"tickersnap/stock/api/#13-request-example","title":"1.3 Request Example:","text":"<pre><code># Get TCS scorecard\ncurl -X GET \"https://analyze.api.tickertape.in/stocks/scorecard/TCS\"\n\n# Get Reliance scorecard\ncurl -X GET \"https://analyze.api.tickertape.in/stocks/scorecard/RELI\"\n\n# Get HDFC Bank scorecard\ncurl -X GET \"https://analyze.api.tickertape.in/stocks/scorecard/HDFC\"\n</code></pre>"},{"location":"tickersnap/stock/api/#14-python-usage","title":"1.4 Python Usage:","text":"StockScorecardAPI <pre><code>from tickersnap.stock import StockScorecardAPI\n\n# Basic usage - get TCS scorecard\nwith StockScorecardAPI() as client:\n    response = client.get_data(\"TCS\")\n    print(f\"Success: {response.success}\")\n    print(f\"Categories found: {len(response.data)}\")\n\n    # Print scorecard categories\n    for item in response.data:\n        print(f\"{item.name}: {item.tag} ({item.colour})\")\n\n# Multiple stocks\nstocks = [\"TCS\", \"RELI\", \"INFY\"]\nwith StockScorecardAPI() as client:\n    for sid in stocks:\n        response = client.get_data(sid)\n        if response.success:\n            print(f\"{sid}: {len(response.data)} categories\")\n\n# With custom timeout\nwith StockScorecardAPI(timeout=30) as client:\n    response = client.get_data(\"HDFC\")\n</code></pre>"},{"location":"tickersnap/stock/api/#15-response-schema","title":"1.5 Response Schema:","text":"<pre><code>{\n    \"success\": true,\n    \"data\": [\n        {\n            \"name\": \"Performance\",\n            \"tag\": \"Low\",\n            \"type\": \"score\",\n            \"description\": \"Hasn't fared well - amongst the low performers\",\n            \"colour\": \"red\",\n            \"score\": {\n                \"percentage\": false,\n                \"max\": 10,\n                \"value\": null,\n                \"key\": \"Performance\"\n            },\n            \"rank\": null,\n            \"peers\": null,\n            \"locked\": true,\n            \"callout\": null,\n            \"comment\": null,\n            \"stack\": 1,\n            \"elements\": []\n        },\n        {\n            \"name\": \"Entry point\",\n            \"tag\": \"Good\",\n            \"type\": \"entryPoint\",\n            \"description\": \"The stock is underpriced and is not in the overbought zone\",\n            \"colour\": \"green\",\n            \"score\": null,\n            \"rank\": null,\n            \"peers\": null,\n            \"locked\": false,\n            \"callout\": null,\n            \"stack\": 5,\n            \"elements\": [\n                {\n                    \"title\": \"Fundamentals\",\n                    \"type\": \"flag\",\n                    \"description\": \"Current price is less than the intrinsic value\",\n                    \"flag\": \"High\",\n                    \"display\": true,\n                    \"score\": null,\n                    \"source\": null\n                }\n            ],\n            \"comment\": null\n        }\n    ]\n}\n</code></pre>"},{"location":"tickersnap/stock/api/#16-response-fields","title":"1.6 Response Fields:","text":"<ul> <li>success (boolean): API call status</li> <li>data (array): List of scorecard category objects (up to 6 items)</li> <li>data[].name (string): Category name (Performance, Valuation, etc.)</li> <li>data[].tag (string): Assessment tag (High, Low, Good, Bad, Avg)</li> <li>data[].type (string): Category type (score, entryPoint, redFlag)</li> <li>data[].description (string): Human-readable assessment explanation</li> <li>data[].colour (string): Color indicator (red, green, yellow)</li> <li>data[].score (object): Score data for financial categories (null for trading categories)</li> <li>data[].elements (array): Detailed factors for entry point and red flags</li> </ul>"},{"location":"tickersnap/stock/api/#error-handling","title":"Error Handling","text":"<p>1 HTTP Status Codes:</p> Code Description Response 200 Success Valid JSON response with data 404 Stock Not Found Invalid SID or stock not available 4xx Client Error Error message in response.text 5xx Server Error Error message in response.text <p>2 Python Exception Types:</p> <pre><code># SID validation errors\nValueError: SID cannot be empty\nValueError: SID cannot be empty  # for whitespace-only SID\n\n# HTTP request errors  \nException: HTTP 404, check 'sid' parameter, error: Stock not found\nException: HTTP 500, check 'sid' parameter, error: Internal Server Error\nException: Request failed: Connection timeout\n\n# Response validation errors\nException: Data validation error: Field 'success' missing\nException: Unexpected error: Invalid JSON response\n</code></pre> <p>3 Error Handling Example:</p> <pre><code>from tickersnap.stock import StockScorecardAPI\n\ntry:\n    with StockScorecardAPI() as client:\n        response = client.get_data(\"INVALID_SID\")\nexcept ValueError as e:\n    print(f\"Parameter error: {e}\")\nexcept Exception as e:\n    print(f\"API error: {e}\")\n</code></pre>"},{"location":"tickersnap/stock/api/#client-configuration","title":"Client Configuration","text":"Timeout SettingsConnection Management <pre><code># Default timeout: 10 seconds\nclient = StockScorecardAPI()\n\n# Custom timeout: 30 seconds  \nclient = StockScorecardAPI(timeout=30)\n\n# For slower connections\nclient = StockScorecardAPI(timeout=60)\n</code></pre> <pre><code># Context manager (recommended)\nwith StockScorecardAPI() as client:\n    response = client.get_data(\"TCS\")\n    # Client automatically closed\n\n# Manual management\nclient = StockScorecardAPI()\ntry:\n    response = client.get_data(\"TCS\")\nfinally:\n    client.close()  # Important: always close\n</code></pre>"},{"location":"tickersnap/stock/api/#usage-examples","title":"Usage Examples","text":"Single Stock AnalysisMulti-Stock ComparisonPortfolio ScreeningData Export <pre><code>from tickersnap.stock import StockScorecardAPI\n\ndef analyze_stock(sid):\n    \"\"\"Analyze a single stock's scorecard.\"\"\"\n    with StockScorecardAPI() as client:\n        response = client.get_data(sid)\n\n        if not response.success:\n            print(f\"No scorecard data available for {sid}\")\n            return\n\n        print(f\"\ud83d\udcca {sid} Scorecard Analysis\")\n        print(f\"Categories found: {len(response.data)}\")\n\n        # Categorize by type\n        financial_cats = []\n        trading_cats = []\n\n        for item in response.data:\n            if item.type == \"score\":\n                financial_cats.append(item)\n            else:\n                trading_cats.append(item)\n\n        # Financial categories\n        print(\"\\n\ud83d\udcb0 Financial Assessment:\")\n        for cat in financial_cats:\n            color_emoji = \"\ud83d\udfe2\" if cat.colour == \"green\" else \"\ud83d\udd34\" if cat.colour == \"red\" else \"\ud83d\udfe1\"\n            print(f\"  {cat.name}: {color_emoji} {cat.tag}\")\n            print(f\"    {cat.description}\")\n\n        # Trading categories\n        print(\"\\n\ud83d\udcc8 Trading Assessment:\")\n        for cat in trading_cats:\n            color_emoji = \"\ud83d\udfe2\" if cat.colour == \"green\" else \"\ud83d\udd34\" if cat.colour == \"red\" else \"\ud83d\udfe1\"\n            print(f\"  {cat.name}: {color_emoji} {cat.tag}\")\n            if cat.elements:\n                for element in cat.elements:\n                    if element.display:\n                        print(f\"    \u2022 {element.title}: {element.flag}\")\n\n# analyze_stock(\"TCS\")\n</code></pre> <pre><code>def compare_stocks(stock_list):\n    \"\"\"Compare multiple stocks' scorecards.\"\"\"\n    results = {}\n\n    with StockScorecardAPI() as client:\n        for sid in stock_list:\n            try:\n                response = client.get_data(sid)\n                if response.success and response.data:\n                    # Extract key metrics\n                    categories = {}\n                    for item in response.data:\n                        categories[item.name] = {\n                            \"tag\": item.tag,\n                            \"colour\": item.colour\n                        }\n                    results[sid] = categories\n                else:\n                    results[sid] = None\n            except Exception as e:\n                print(f\"Error fetching {sid}: {e}\")\n                results[sid] = None\n\n    # Display comparison\n    print(\"\ud83d\udcca Stock Comparison\")\n    print(\"-\" * 50)\n\n    # Get all unique categories\n    all_categories = set()\n    for stock_data in results.values():\n        if stock_data:\n            all_categories.update(stock_data.keys())\n\n    # Print header\n    print(f\"{'Category':&lt;15}\", end=\"\")\n    for sid in stock_list:\n        print(f\"{sid:&lt;12}\", end=\"\")\n    print()\n\n    # Print data\n    for category in sorted(all_categories):\n        print(f\"{category:&lt;15}\", end=\"\")\n        for sid in stock_list:\n            if results[sid] and category in results[sid]:\n                tag = results[sid][category][\"tag\"]\n                color = results[sid][category][\"colour\"]\n                emoji = \"\ud83d\udfe2\" if color == \"green\" else \"\ud83d\udd34\" if color == \"red\" else \"\ud83d\udfe1\"\n                print(f\"{emoji}{tag:&lt;11}\", end=\"\")\n            else:\n                print(f\"{'N/A':&lt;12}\", end=\"\")\n        print()\n\n# compare_stocks([\"TCS\", \"RELI\", \"INFY\"])\n</code></pre> <pre><code>def screen_portfolio(portfolio_sids, min_good_categories=2):\n    \"\"\"Screen portfolio stocks based on scorecard criteria.\"\"\"\n    good_stocks = []\n    risky_stocks = []\n\n    with StockScorecardAPI() as client:\n        for sid in portfolio_sids:\n            try:\n                response = client.get_data(sid)\n                if not response.success or not response.data:\n                    continue\n\n                # Count good vs bad categories\n                good_count = 0\n                bad_count = 0\n                red_flags = False\n\n                for item in response.data:\n                    if item.colour == \"green\":\n                        good_count += 1\n                    elif item.colour == \"red\":\n                        bad_count += 1\n\n                    # Check for red flags\n                    if item.name == \"Red flags\" and item.colour == \"red\":\n                        red_flags = True\n\n                # Classification\n                if red_flags:\n                    risky_stocks.append({\n                        \"sid\": sid,\n                        \"reason\": \"Has red flags\",\n                        \"good\": good_count,\n                        \"bad\": bad_count\n                    })\n                elif good_count &gt;= min_good_categories and bad_count &lt;= good_count:\n                    good_stocks.append({\n                        \"sid\": sid,\n                        \"good\": good_count,\n                        \"bad\": bad_count\n                    })\n                else:\n                    risky_stocks.append({\n                        \"sid\": sid,\n                        \"reason\": f\"Only {good_count} good categories\",\n                        \"good\": good_count,\n                        \"bad\": bad_count\n                    })\n\n            except Exception as e:\n                print(f\"Error screening {sid}: {e}\")\n\n    # Results\n    print(\"\ud83d\udfe2 Good Stocks:\")\n    for stock in good_stocks:\n        print(f\"  {stock['sid']}: {stock['good']} good, {stock['bad']} bad\")\n\n    print(\"\\n\ud83d\udd34 Risky Stocks:\")\n    for stock in risky_stocks:\n        print(f\"  {stock['sid']}: {stock['reason']} ({stock['good']} good, {stock['bad']} bad)\")\n\n# portfolio = [\"TCS\", \"RELI\", \"INFY\", \"HDFC\"]\n# screen_portfolio(portfolio)\n</code></pre> <pre><code>import csv\nfrom datetime import datetime\n\ndef export_scorecard_data(stock_list, filename=None):\n    \"\"\"Export scorecard data to CSV.\"\"\"\n    if not filename:\n        filename = f\"scorecard_data_{datetime.now().strftime('%Y%m%d')}.csv\"\n\n    data = []\n\n    with StockScorecardAPI() as client:\n        for sid in stock_list:\n            try:\n                response = client.get_data(sid)\n                if response.success and response.data:\n                    for item in response.data:\n                        data.append({\n                            \"SID\": sid,\n                            \"Category\": item.name,\n                            \"Tag\": item.tag,\n                            \"Type\": item.type,\n                            \"Description\": item.description,\n                            \"Colour\": item.colour,\n                            \"Stack\": item.stack,\n                            \"Locked\": item.locked\n                        })\n            except Exception as e:\n                print(f\"Error exporting {sid}: {e}\")\n\n    # Write to CSV\n    if data:\n        with open(filename, 'w', newline='', encoding='utf-8') as csvfile:\n            fieldnames = [\"SID\", \"Category\", \"Tag\", \"Type\", \"Description\", \"Colour\", \"Stack\", \"Locked\"]\n            writer = csv.DictWriter(csvfile, fieldnames=fieldnames)\n\n            writer.writeheader()\n            writer.writerows(data)\n\n        print(f\"Exported {len(data)} scorecard entries to {filename}\")\n    else:\n        print(\"No data to export\")\n\n# stocks = [\"TCS\", \"RELI\", \"INFY\"]\n# export_scorecard_data(stocks)\n</code></pre>"},{"location":"tickersnap/stock/api/#rate-limiting-best-practices","title":"Rate Limiting &amp; Best Practices","text":""},{"location":"tickersnap/stock/api/#recommended-usage","title":"Recommended Usage","text":"<ul> <li>Individual analysis: Real-time calls acceptable for single stocks</li> <li>Bulk screening: Implement delays between requests (150ms recommended)</li> <li>Portfolio monitoring: Once per day or as needed</li> </ul> Client ReuseError RecoveryBulk Processing <p>\u2705 Good: Reuse client for multiple calls</p> <pre><code>with StockScorecardAPI() as client:\n    for sid in [\"TCS\", \"RELI\", \"INFY\"]:\n        response = client.get_data(sid)\n        # process response...\n</code></pre> <p>\u274c Avoid: Creating new client for each call  </p> <pre><code>for sid in [\"TCS\", \"RELI\", \"INFY\"]:\n    with StockScorecardAPI() as client:\n        response = client.get_data(sid)\n</code></pre> <pre><code>import time\nfrom tickersnap.stock import StockScorecardAPI\n\ndef robust_scorecard_fetch(sid, retries=3):\n    \"\"\"Fetch scorecard with retry logic.\"\"\"\n    for attempt in range(retries):\n        try:\n            with StockScorecardAPI(timeout=30) as client:\n                return client.get_data(sid)\n        except Exception as e:\n            if attempt == retries - 1:\n                raise e\n            print(f\"Attempt {attempt + 1} failed for {sid}: {e}\")\n            time.sleep(2 ** attempt)  # exponential backoff\n</code></pre> <pre><code>import time\n\ndef process_stock_list(stock_list, delay=0.15):\n    \"\"\"Process large stock lists with rate limiting.\"\"\"\n    results = {}\n\n    with StockScorecardAPI(timeout=30) as client:\n        for i, sid in enumerate(stock_list):\n            try:\n                response = client.get_data(sid)\n                results[sid] = response\n\n                # Progress tracking\n                if (i + 1) % 50 == 0:\n                    print(f\"Processed {i + 1}/{len(stock_list)} stocks\")\n\n                # Rate limiting\n                if i &lt; len(stock_list) - 1:  # Don't delay after last item\n                    time.sleep(delay)\n\n            except Exception as e:\n                print(f\"Error processing {sid}: {e}\")\n                results[sid] = None\n\n    return results\n</code></pre>"},{"location":"tickersnap/stock/api/#edge-cases","title":"Edge Cases","text":""},{"location":"tickersnap/stock/api/#stocks-with-limited-data","title":"Stocks with Limited Data","text":"<p>Some stocks (particularly smaller companies) may have limited scorecard data or fewer categories:</p> <pre><code># Example stocks with limited data\nedge_case_stocks = [\"INDL\", \"ELLE\", \"ATE\", \"OSWAP\"]\n\nwith StockScorecardAPI() as client:\n    for sid in edge_case_stocks:\n        response = client.get_data(sid)\n        if response.success:\n            categories = [item.name for item in response.data]\n            print(f\"{sid}: {categories}\")\n            # May only show: ['Entry point', 'Red flags']\n</code></pre>"},{"location":"tickersnap/stock/api/#failed-responses","title":"Failed Responses","text":"<pre><code># Handle stocks that don't exist or have no data\nresponse = client.get_data(\"INVALID_SID\")\nif not response.success:\n    print(\"Stock not found or no scorecard data available\")\n</code></pre>"},{"location":"tickersnap/stock/api/#tickersnap.stock.api","title":"<code>tickersnap.stock.api</code>","text":"<p>Tickersnap Stock Scorecard Client</p> <p>A module for accessing stock scorecard data from the Tickertape API.</p> <p>This module provides a streamlined way to fetch stock scorecard information including performance, valuation, growth, profitability, entry point, and red flags.</p> Features <ul> <li>Fetch complete scorecard data for any stock by SID</li> <li>Automatic handling of missing categories and failed requests</li> <li>Preserve and access the original tickertape API response structure</li> <li>Simple client interface with proper error handling</li> </ul>"},{"location":"tickersnap/stock/api/#tickersnap.stock.api.StockScorecardAPI","title":"<code>StockScorecardAPI</code>","text":"<p>Client for fetching stock scorecard data from Tickertape.</p> <p>Supports fetching complete scorecard information for any stock using its SID. The scorecard includes 6 categories: Performance, Valuation, Growth, Profitability, Entry Point, and Red Flags (when available).</p> <ul> <li>BASE_URL: \"https://analyze.api.tickertape.in/stocks/scorecard\"</li> </ul> Example <pre><code># Using as a client object (don't forget to close)\nscorecard = StockScorecardAPI()\ndata = scorecard.get_data(\"TCS\")\nprint(data.success)\nscorecard.close()\n</code></pre> <pre><code># Using as context manager (automatically closed)\nwith StockScorecardAPI() as scorecard:\n    data = scorecard.get_data(\"TCS\")\n    if data.success and data.data:\n        print(f\"Found {len(data.data)} scorecard categories\")\n</code></pre>"},{"location":"tickersnap/stock/api/#tickersnap.stock.api.StockScorecardAPI.__init__","title":"<code>__init__(timeout=10)</code>","text":"<p>Initialize the Stock Scorecard API client.</p> <p>Parameters:</p> Name Type Description Default <code>timeout</code> <code>int</code> <p>Request timeout in seconds. Defaults to 10.</p> <code>10</code>"},{"location":"tickersnap/stock/api/#tickersnap.stock.api.StockScorecardAPI.__enter__","title":"<code>__enter__()</code>","text":"<p>Context manager entry.</p>"},{"location":"tickersnap/stock/api/#tickersnap.stock.api.StockScorecardAPI.__exit__","title":"<code>__exit__(exc_type, exc_val, exc_tb)</code>","text":"<p>Context manager exit.</p>"},{"location":"tickersnap/stock/api/#tickersnap.stock.api.StockScorecardAPI.close","title":"<code>close()</code>","text":"<p>Close the HTTP client.</p>"},{"location":"tickersnap/stock/api/#tickersnap.stock.api.StockScorecardAPI.get_data","title":"<code>get_data(sid)</code>","text":"<p>Fetch stock scorecard data from Tickertape.</p> <p>Parameters:</p> Name Type Description Default <code>sid</code> <code>str</code> <p>Stock SID (Security ID) as used by Tickertape. Example: \"TCS\", \"RELI\", \"INFY\"</p> required <p>Returns:</p> Name Type Description <code>ScorecardResponse</code> <code>ScorecardResponse</code> <p>Raw API response or None if request fails.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If SID is empty or invalid.</p> <code>Exception</code> <p>If HTTP request fails or data validation fails.</p>"},{"location":"tickersnap/stock/models/","title":"Models","text":""},{"location":"tickersnap/stock/models/#details-and-summary","title":"Details and Summary","text":"<ul> <li>Tickertape Models: Pydantic models to hold and map the Tickertape API response for stock scorecard data, acting as a schema for the response.</li> <li>Tickersnap Models: Pydantic models to hold <code>Tickersnap</code> defined models, to work easily with the library data.</li> </ul> Tickertape Models (API Response)Tickersnap Models (Library Datatypes)"},{"location":"tickersnap/stock/models/#stock-scorecard","title":"Stock Scorecard","text":"<ul> <li>Main model: <code>ScorecardResponse</code></li> <li>Depends on: <code>ScorecardItem</code>, <code>ScoreData</code>, <code>ScorecardElement</code><ul> <li><code>ScorecardItem</code>: holds individual scorecard category data</li> <li><code>ScoreData</code>: holds score information for financial categories</li> <li><code>ScorecardElement</code>: holds element data for entry point and red flags</li> </ul> </li> </ul>"},{"location":"tickersnap/stock/models/#stock-scores-user-friendly","title":"Stock Scores (User-Friendly)","text":"<ul> <li>Main model: <code>StockScores</code></li> <li>Depends on: <code>Score</code>, <code>ScoreRating</code><ul> <li><code>Score</code>: simplified scorecard data point with rating</li> <li><code>ScoreRating</code>: unified good/bad/okay/unknown classification</li> </ul> </li> </ul>"},{"location":"tickersnap/stock/models/#usage","title":"Usage","text":"Model Source API / Used By Description Usage For Public? <code>ScorecardResponse</code> (GET) analyze /stocks/scorecard/{sid} Complete stock scorecard data get 6 scorecard categories for any stock \u2705 <code>ScorecardItem</code> <code>ScorecardResponse</code> holds individual category data (internal use) \u274c <code>ScoreData</code> <code>ScorecardItem</code> holds score information (internal use) \u274c <code>ScorecardElement</code> <code>ScorecardItem</code> holds element data (internal use) \u274c <code>StockScores</code> <code>StockScorecard</code> simplified user-friendly scores simplified stock analysis \u2705 <code>Score</code> <code>StockScores</code> individual score with rating (internal use) \u274c <code>ScoreRating</code> <code>Score</code> good/bad classification (internal use) \u274c"},{"location":"tickersnap/stock/models/#scorecard-categories","title":"Scorecard Categories","text":"<p>The stock scorecard contains 6 main categories that evaluate different aspects of a stock:</p>"},{"location":"tickersnap/stock/models/#core-financial-categories-score-based","title":"Core Financial Categories (Score-based)","text":"<ul> <li>Performance: Stock price performance vs market</li> <li>Valuation: Stock valuation vs market average  </li> <li>Growth: Company growth prospects and trends</li> <li>Profitability: Company profitability and efficiency</li> </ul>"},{"location":"tickersnap/stock/models/#trading-categories-element-based","title":"Trading Categories (Element-based)","text":"<ul> <li>Entry Point: Current entry timing assessment with detailed factors</li> <li>Red Flags: Risk assessment with detailed warning indicators</li> </ul>"},{"location":"tickersnap/stock/models/#score-ratings","title":"Score Ratings","text":"Rating Description Color Signal Investment Implication GOOD Positive indicator \ud83d\udfe2 Green Favorable conditions OKAY Neutral indicator \ud83d\udfe1 Yellow/Orange Average conditions BAD Negative indicator \ud83d\udd34 Red Unfavorable conditions UNKNOWN Missing/insufficient data \u26aa Gray Unable to determine"},{"location":"tickersnap/stock/models/#field-reference","title":"Field Reference","text":"<p>Below is a comprehensive reference for all the fields found in the stock scorecard API models, grouped by logical sections:</p> Model Fields Reference"},{"location":"tickersnap/stock/models/#1-response-structure","title":"1. Response Structure:","text":"Field Full Form Type Range/Format Description <code>success</code> Success Status <code>bool</code> true/false API response success indicator <code>data</code> Data Payload <code>List[ScorecardItem]</code> array List of scorecard category objects (up to 6 items)"},{"location":"tickersnap/stock/models/#2-scorecard-item-fields","title":"2. Scorecard Item Fields:","text":"Field Full Form Type Range/Format Description <code>name</code> Category Name <code>str</code> text Scorecard category name (Performance, Valuation, etc.) <code>tag</code> Category Tag <code>str</code> High/Low/Good/Bad/Avg Category assessment tag <code>type</code> Category Type <code>str</code> score/entryPoint/redFlag Type of scorecard category <code>description</code> Description <code>str</code> text Human-readable explanation of the assessment <code>colour</code> Color Signal <code>str</code> red/green/yellow Color indicator for quick visual assessment <code>locked</code> Locked Status <code>bool</code> true/false Whether category data is premium/locked <code>stack</code> Stack Order <code>int</code> 1-6 Display order of categories (1=Performance, 6=Red Flags) <code>elements</code> Elements List <code>List[ScorecardElement]</code> array Detailed factors (for Entry Point and Red Flags only)"},{"location":"tickersnap/stock/models/#3-score-data-fields-financial-categories","title":"3. Score Data Fields (Financial Categories):","text":"Field Full Form Type Range/Format Description <code>percentage</code> Percentage Flag <code>bool</code> true/false Whether score value is a percentage <code>max</code> Maximum Score <code>int</code> positive Maximum possible score value <code>value</code> Score Value <code>float</code> varies Actual score value (can be null) <code>key</code> Score Key <code>str</code> text Score identifier matching category name"},{"location":"tickersnap/stock/models/#4-element-fields-entry-point-red-flags","title":"4. Element Fields (Entry Point &amp; Red Flags):","text":"Field Full Form Type Range/Format Description <code>title</code> Element Title <code>str</code> text Name of the specific factor (e.g., \"Fundamentals\", \"ASM\") <code>type</code> Element Type <code>str</code> flag Type of element (typically \"flag\") <code>description</code> Element Description <code>str</code> text Detailed explanation of the factor <code>flag</code> Flag Value <code>str</code> High/Low/Medium Assessment level for this factor <code>display</code> Display Flag <code>bool</code> true/false Whether this element should be shown to users <code>score</code> Element Score <code>Any</code> varies Score value for this element (typically null) <code>source</code> Data Source <code>str</code> text Source of the data (typically null)"},{"location":"tickersnap/stock/models/#5-user-friendly-models-stockscores","title":"5. User-Friendly Models (StockScores):","text":"Field Full Form Type Range/Format Description <code>performance</code> Performance Score <code>Score</code> object Overall stock performance assessment <code>valuation</code> Valuation Score <code>Score</code> object Stock valuation assessment <code>growth</code> Growth Score <code>Score</code> object Company growth prospects <code>profitability</code> Profitability Score <code>Score</code> object Company profitability assessment <code>entry_point</code> Entry Point Score <code>Score</code> object Current entry timing assessment <code>entry_point_elements</code> Entry Point Details <code>List[Score]</code> array Detailed entry point factors <code>red_flags</code> Red Flags Score <code>Score</code> object Overall red flags assessment <code>red_flags_elements</code> Red Flag Details <code>List[Score]</code> array Detailed red flag factors"},{"location":"tickersnap/stock/models/#6-individual-score-fields","title":"6. Individual Score Fields:","text":"Field Full Form Type Range/Format Description <code>name</code> Score Name <code>str</code> text Display name of the scorecard item <code>description</code> Score Description <code>str</code> text Human-readable explanation <code>value</code> Score Value <code>str</code> text The actual tag/value from API (e.g., \"High\", \"Low\") <code>rating</code> Score Rating <code>ScoreRating</code> enum Simplified good/bad/okay/unknown classification"},{"location":"tickersnap/stock/models/#category-details","title":"Category Details","text":""},{"location":"tickersnap/stock/models/#financial-categories-score-based","title":"Financial Categories (Score-based)","text":"<p>These categories use quantitative scoring and provide overall assessments:</p> <ul> <li>Performance: Tracks stock price performance relative to market indices</li> <li>Valuation: Compares stock valuation metrics to market averages</li> <li>Growth: Evaluates company growth metrics and future prospects  </li> <li>Profitability: Assesses company profitability ratios and efficiency</li> </ul> <p>Characteristics:</p> <ul> <li>Have <code>score</code> data with numerical values</li> <li>Empty <code>elements</code> array</li> <li>Tags: typically \"High\", \"Low\", \"Good\", \"Bad\"</li> <li>Colors: red (bad), green (good), yellow (neutral)</li> </ul>"},{"location":"tickersnap/stock/models/#trading-categories-element-based_1","title":"Trading Categories (Element-based)","text":"<p>These categories provide detailed breakdowns with multiple factors:</p> <ul> <li> <p>Entry Point: Analyzes current entry timing with factors like:</p> <ul> <li>Fundamentals (intrinsic value vs current price)</li> <li>Technicals (overbought/oversold conditions)</li> </ul> </li> <li> <p>Red Flags: Identifies potential risks with factors like:</p> <ul> <li>ASM (Additional Surveillance Measure) status</li> <li>GSM (Graded Surveillance Measure) status  </li> <li>Promoter pledged holdings</li> <li>Unsolicited messages</li> <li>Default probability</li> </ul> </li> </ul> <p>Characteristics:</p> <ul> <li>No <code>score</code> data (score is null)</li> <li>Populated <code>elements</code> array with detailed factors</li> <li>Tags: \"Good\", \"Bad\", \"Avg\" for overall assessment</li> <li>Individual elements have their own flag values</li> </ul>"},{"location":"tickersnap/stock/models/#edge-cases","title":"Edge Cases","text":""},{"location":"tickersnap/stock/models/#stocks-with-missing-categories","title":"Stocks with Missing Categories","text":"<p>Some stocks (particularly smaller companies) may not have all 6 categories, though this is becoming less common as the API evolves:</p> <ul> <li>Common scenario: Only Entry Point and Red Flags available</li> <li>Missing categories: Performance, Valuation, Growth, Profitability</li> <li>Reason: Insufficient financial data for comprehensive analysis</li> <li>Examples: INDL, ELLE, ATE, OSWAP (as of testing)</li> </ul>"},{"location":"tickersnap/stock/models/#failed-responses","title":"Failed Responses","text":"<ul> <li>success: false</li> <li>data: null</li> <li>Reason: Invalid SID or stock not found</li> </ul>"},{"location":"tickersnap/stock/models/#tickersnap.stock.models","title":"<code>tickersnap.stock.models</code>","text":""},{"location":"tickersnap/stock/models/#tickersnap.stock.models.ScoreData","title":"<code>ScoreData</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Score information for scorecard categories.</p> <p>This model follows tickertape API response's schema for scorecard data within performance, valuation, growth, and profitability categories.</p> Note <ul> <li>internal use only</li> <li>used by models: <code>ScorecardItem</code></li> <li>used only in \"score\" field of: performance, valuation, growth, profitability</li> </ul> Disclaimer <ul> <li>some fields can be missing (<code>None</code>)     for some stocks when the data is not available</li> </ul>"},{"location":"tickersnap/stock/models/#tickersnap.stock.models.ScorecardElement","title":"<code>ScorecardElement</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Individual element within scorecard categories like Entry Point and Red Flags.</p> <p>This model follows tickertape API response's schema for elements data within entry point and red flags categories.</p> Note <ul> <li>internal use only</li> <li>used by models: <code>ScorecardItem</code></li> <li>used only in \"elements\" field of: entry_point, red_flags</li> </ul> Disclaimer <ul> <li>some fields can be missing (<code>None</code>)     for some stocks when the data is not available</li> </ul>"},{"location":"tickersnap/stock/models/#tickersnap.stock.models.ScorecardItem","title":"<code>ScorecardItem</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Individual scorecard category item (Performance, Valuation, Growth, Profitability, Entry Point, Red Flags).</p> <p>This model follows tickertape API response's schema for individual scorecard items. Each item represents one of the 6 scorecard categories with their respective data.</p> Note <ul> <li>internal use only</li> <li>used by models: <code>ScorecardResponse</code></li> </ul> Disclaimer <ul> <li>some fields can be missing (<code>None</code>)     for some stocks when the data is not available</li> <li><code>score</code> will be <code>None</code> for \"entry point\" and \"red flag\" types</li> <li><code>elements</code> will be empty     for \"performance\", \"valuation\", \"growth\", \"profitability\" types</li> </ul>"},{"location":"tickersnap/stock/models/#tickersnap.stock.models.ScorecardResponse","title":"<code>ScorecardResponse</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents API response payload from <code>analyze.api.tickertape.in/stocks/scorecard/{sid}</code> endpoint.</p> <p>It contains the complete scorecard information for a stock including all 6 categories (when available): Performance, Valuation, Growth, Profitability, Entry Point, and Red Flags.</p> Note <ul> <li>matches the exact API response structure</li> <li>some stocks may have missing categories (success=true but limited data)</li> <li>failed requests return success=false with data=null</li> </ul> Reference <ul> <li>HTTP Request: GET</li> <li>URL: https://analyze.api.tickertape.in/stocks/scorecard/{sid},     (where <code>sid</code> is the stock's Security ID)</li> <li>Response Body: <code>ScorecardResponse</code></li> </ul>"},{"location":"tickersnap/stock/models/#tickersnap.stock.models.ScoreRating","title":"<code>ScoreRating</code>","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>Unified rating system for all scorecard categories and elements.</p> <p>Provides a simple good/bad classification for any scorecard data point, making it easy for users to quickly assess stock conditions without needing to interpret complex financial metrics.</p> Values <ul> <li>GOOD: Positive indicator (green signals, favorable conditions)</li> <li>OKAY: Neutral indicator (yellow/orange signals, average conditions)</li> <li>BAD: Negative indicator (red signals, unfavorable conditions)</li> <li>UNKNOWN: Missing/insufficient data or unable to determine rating</li> </ul>"},{"location":"tickersnap/stock/models/#tickersnap.stock.models.Score","title":"<code>Score</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents a single scorecard data point with simplified user-friendly information.</p> <p>Used for both main categories (Performance, Valuation, etc.) and individual elements within Entry Point and Red Flags. Provides consistent structure across all scorecard data.</p> Field Descriptions <ul> <li><code>name</code>: Display name of the scorecard item</li> <li><code>description</code>: Human-readable explanation of what this measures</li> <li><code>value</code>: The actual value/tag from the API (e.g., \"High\", \"Low\", \"Good\")</li> <li><code>rating</code>: Simplified good/bad/okay/unknown classification</li> </ul> Note <ul> <li>value can be None when data is not available</li> <li>rating helps users quickly understand if something is positive or negative</li> <li>consistent structure for both categories and elements</li> </ul>"},{"location":"tickersnap/stock/models/#tickersnap.stock.models.StockScores","title":"<code>StockScores</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Complete scorecard information (simplified) for a stock.</p> <p>Provides end-user focused access to all 6 scorecard categories with simplified good/bad ratings. Removes API complexity and presents data in an intuitive format for quick stock analysis.</p> Categories <ul> <li>Core Financial: performance, valuation, growth, profitability</li> <li>Trading Focused: entry_point, red_flags (with detailed elements)</li> </ul> Field Descriptions <ul> <li><code>performance</code>: Overall stock performance rating</li> <li><code>valuation</code>: Stock valuation assessment (expensive/cheap)</li> <li><code>growth</code>: Company growth prospects rating</li> <li><code>profitability</code>: Company profitability assessment</li> <li><code>entry_point</code>: Current entry timing assessment</li> <li><code>entry_point_elements</code>: Detailed entry point factors (List[Score])</li> <li><code>red_flags</code>: Overall red flags assessment</li> <li><code>red_flags_elements</code>: Detailed red flag factors (List[Score])</li> </ul> Note <ul> <li>All fields are Optional as some stocks may have missing categories</li> <li>Elements provide detailed breakdown for entry_point and red_flags</li> <li>Missing categories will be None (not populated)</li> <li>Use rating field for quick good/bad assessment</li> </ul>"},{"location":"tickersnap/stock/models/#tickersnap.stock.models.StockWithScorecard","title":"<code>StockWithScorecard</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Combined asset information with scorecard data.</p> <p>Provides a unified view of stock asset information along with scorecard analysis. This model combines the essential stock details (from AssetData) with the comprehensive scorecard evaluation (from StockScores).</p> Field Descriptions <ul> <li><code>asset</code>: Complete stock asset information (SID, name, ticker, etc.)</li> <li><code>scorecard</code>: Scorecard analysis data (None if unavailable/failed)</li> </ul> Use Cases <ul> <li>Bulk stock analysis with both basic info and scorecard data</li> <li>Portfolio screening with combined asset and performance metrics</li> <li>Quick stock evaluation with all relevant data in one object</li> </ul> Note <ul> <li>scorecard can be None if the API call failed or data is unavailable</li> <li>asset information is always present (from the input AssetData)</li> <li>Follows composition pattern for clear data separation</li> </ul>"},{"location":"tickersnap/stock/scorecard/","title":"Stock Scorecard","text":"<p>A high-level Python interface for accessing Tickertape's Stock Scorecard data with simplified, user-friendly methods.</p> <p>It provides simple functions to get comprehensive stock analysis including 6 key categories for daily market analysis (as listed below), with no headache of complex API handling, and distraction free excessive data fields knowledge!</p> <p>Key Categories from Tickertape Scorecard:</p> <ul> <li>Performance</li> <li>Valuation</li> <li>Growth</li> <li>Profitability</li> <li>Entry Point</li> <li>Red Flags</li> </ul> <p>Disclaimer</p> <p>Stock scorecard data is for informational purposes only. Not financial advice. Always consult qualified financial advisors before making investment decisions.</p>"},{"location":"tickersnap/stock/scorecard/#overview","title":"Overview","text":"<p>The <code>StockScorecard</code> class provides a clean, intuitive API for accessing comprehensive stock analysis without dealing with complex API responses or field mappings. Perfect for stock screening, portfolio analysis, investment research, and automated trading strategies.</p> <p>Key Features:</p> <ul> <li>\u2705 Comprehensive Analysis - 6 key categories covering all aspects of stock evaluation</li> <li>\u2705 Batch Processing - Analyze multiple stocks concurrently with progress tracking</li> <li>\u2705 Combined Data - Asset + Scorecard data in unified format</li> <li>\u2705 Smart Ratings - No confusion with good/bad/okay classifications</li> <li>\u2705 Error Resilience - Partial failures don't stop the entire process</li> <li>\u2705 Performance Optimized - Concurrent processing for 5k+ stocks</li> <li>\u2705 Extensive Test Coverage - A robust CI/CD pipeline to identify changes in Tickertape API.</li> </ul> <p>Note</p> <ul> <li>I personally find the tickertape scorecard to be a bit confusing!</li> <li>It uses a mix of scores, flags, values, and numbers to indicate the rating.</li> <li>Instead of mental headache to see which \"high\" means good or bad, we have simplified it to a single rating.</li> <li>Simply look for good, bad, okay, and unknown (for missing data) ratings.</li> </ul> <p>Tip</p> <ul> <li>Logically speaking, only \"Valuation\" and \"Red Flags\" are cases where <code>low</code> means good and <code>high</code> means bad.</li> <li>For all other scores and elements in categories, <code>high</code> means good and <code>low</code> means bad.</li> </ul>"},{"location":"tickersnap/stock/scorecard/#quick-start","title":"Quick Start","text":"<p>Analyze Stock Scorecards</p> <pre><code>from tickersnap.stock import StockScorecard\n\n# Initialize scorecard client\nscorecard = StockScorecard()\n\n# Get single stock scorecard\ntcs_scores = scorecard.get_scorecard(\"TCS\")\nprint(f\"Performance: {tcs_scores.performance.value} ({tcs_scores.performance.rating})\")\nprint(f\"Valuation: {tcs_scores.valuation.value} ({tcs_scores.valuation.rating})\")\n\n# Get multiple stocks with progress\nstocks = [\"TCS\", \"RELI\", \"INFY\", \"HDFC\"]\nresults = scorecard.get_scorecards(stocks, progress=True)\n\n# Count good vs bad stocks\ngood_stocks = [r for r in results if r and r.performance and r.performance.rating.name == \"GOOD\"]\nprint(f\"Good performers: {len(good_stocks)}/{len(stocks)}\")\n\n# Combined asset + scorecard data\nfrom tickersnap.lists import Assets\nassets = Assets()\ntcs_asset = next(s for s in assets.get_all_stocks() if s.sid == \"TCS\")\n\ncombined = scorecard.get_stock_with_scorecard(tcs_asset)\nprint(f\"Stock: {combined.asset.name} ({combined.asset.ticker})\")\nif combined.scorecard:\n    print(f\"Entry Point: {combined.scorecard.entry_point.rating}\")\n</code></pre>"},{"location":"tickersnap/stock/scorecard/#core-methods","title":"Core Methods","text":"Single Stock AnalysisBatch ProcessingSingle Asset + ScorecardBatch Asset + Scorecard <p>Get comprehensive scorecard for a single stock by SID.</p> <p>Function Signature</p> <pre><code>def get_scorecard(sid: str) -&gt; StockScores\n</code></pre> <p>Returns</p> <ul> <li>Complete stock scorecard with 6 categories</li> <li>User-friendly ratings (GOOD/BAD/OKAY/UNKNOWN)</li> <li>Detailed elements for Entry Point and Red Flags</li> </ul> <p>Example</p> <pre><code>scorecard = StockScorecard()\nscores = scorecard.get_scorecard(\"TCS\")\n\n# Financial categories\nprint(f\"Performance: {scores.performance.value} - {scores.performance.description}\")\nprint(f\"Valuation: {scores.valuation.value} - {scores.valuation.rating}\")\nprint(f\"Growth: {scores.growth.value}\")\nprint(f\"Profitability: {scores.profitability.value}\")\n\n# Trading categories with elements\nif scores.entry_point:\n    print(f\"Entry Point: {scores.entry_point.value} ({scores.entry_point.rating})\")\n    if scores.entry_point_elements:\n        for element in scores.entry_point_elements:\n            print(f\"  \u2022 {element.name}: {element.value} ({element.rating})\")\n\nif scores.red_flags:\n    print(f\"Red Flags: {scores.red_flags.value} ({scores.red_flags.rating})\")\n    if scores.red_flags_elements:\n        for flag in scores.red_flags_elements:\n            print(f\"  \u26a0\ufe0f {flag.name}: {flag.value}\")\n\n# Quick investment signal\ngood_categories = sum(1 for cat in [scores.performance, scores.valuation, \n                                  scores.growth, scores.profitability] \n                     if cat and cat.rating.name == \"GOOD\")\nprint(f\"Investment signal: {good_categories}/4 categories are good\")\n</code></pre> <p>Get scorecards for multiple stocks with concurrent processing and progress tracking.</p> <p>Function Signature</p> <pre><code>def get_scorecards(\n    sids: List[str], \n    progress: Optional[ProgressType] = None\n) -&gt; List[Optional[StockScores]]\n</code></pre> <p>Returns</p> <ul> <li>List of scorecard data (None for failed requests)</li> <li>Order matches input SID order</li> <li>Concurrent processing for performance</li> </ul> <p>Example</p> <pre><code>scorecard = StockScorecard(max_workers=20)\n\n# Large batch with progress bar\nlarge_cap_stocks = [\"TCS\", \"RELI\", \"INFY\", \"HDFC\", \"ICICIBANK\", \"KOTAKBANK\"]\nresults = scorecard.get_scorecards(large_cap_stocks, progress=True)\n\n# Analyze results\nsuccessful = [r for r in results if r is not None]\nprint(f\"Success rate: {len(successful)}/{len(large_cap_stocks)}\")\n\n# Custom progress callback\ndef progress_callback(completed, total, current_sid):\n    percentage = (completed / total) * 100\n    print(f\"Progress: {percentage:.1f}% - Processing {current_sid}\")\n\nresults = scorecard.get_scorecards(\n    large_cap_stocks, \n    progress=progress_callback\n)\n\n# Screen for good stocks\ngood_stocks = []\nfor i, result in enumerate(results):\n    if result:\n        good_count = sum(1 for cat in [result.performance, result.valuation,\n                                     result.growth, result.profitability]\n                       if cat and cat.rating.name == \"GOOD\")\n        if good_count &gt;= 2:  # At least 2 good categories\n            good_stocks.append(large_cap_stocks[i])\n\nprint(f\"Stocks with 2+ good categories: {good_stocks}\")\n</code></pre> <p>Get combined asset information + scorecard data for a single stock.</p> <p>Function Signature</p> <pre><code>def get_stock_with_scorecard(asset: AssetData) -&gt; StockWithScorecard\n</code></pre> <p>Returns</p> <ul> <li>Asset metadata (name, ticker, ISIN, etc.)</li> <li>Scorecard data (or None if API fails)</li> <li>Unified format for easy processing</li> </ul> <p>Example</p> <pre><code>from tickersnap.lists import Assets\nfrom tickersnap.stock import StockScorecard\n\n# Get asset data\nassets_client = Assets()\nscorecard_client = StockScorecard()\n\n# Single stock with complete data\nall_stocks = assets_client.get_all_stocks()\ntcs_asset = next(s for s in all_stocks if s.sid == \"TCS\")\n\ncombined = scorecard_client.get_stock_with_scorecard(tcs_asset)\nprint(f\"Company: {combined.asset.name}\")\nprint(f\"Ticker: {combined.asset.ticker}\")\nprint(f\"ISIN: {combined.asset.isin}\")\n\nif combined.scorecard:\n    print(f\"Overall assessment available with {sum(1 for cat in [\n        combined.scorecard.performance, combined.scorecard.valuation,\n        combined.scorecard.growth, combined.scorecard.profitability,\n        combined.scorecard.entry_point, combined.scorecard.red_flags\n    ] if cat)} categories\")\nelse:\n    print(\"\u274c Scorecard data unavailable\")\n</code></pre> <p>Get combined asset information + scorecard data for multiple stocks with concurrent processing.</p> <p>Function Signature</p> <pre><code>def get_stocks_with_scorecards(\n    assets: List[AssetData], \n    progress: Optional[ProgressType] = None\n) -&gt; List[StockWithScorecard]\n</code></pre> <p>Returns</p> <ul> <li>List of combined asset + scorecard data</li> <li>Asset metadata always present</li> <li>Scorecard data (or None if API fails)</li> <li>Order matches input assets order</li> </ul> <p>Example</p> <pre><code>from tickersnap.lists import Assets\nfrom tickersnap.stock import StockScorecard\n\n# Get asset data\nassets_client = Assets()\nscorecard_client = StockScorecard()\n\n# Batch processing with complete data\nall_stocks = assets_client.get_all_stocks()\nnifty50_assets = [s for s in all_stocks if any(name in s.name for name in [\n    \"Tata Consultancy\",\n    \"Reliance Industries\", \n    \"HDFC Bank\", \"Infosys\"\n])][:4]  # Sample 4 stocks\n\ncombined_results = scorecard_client.get_stocks_with_scorecards(\n    nifty50_assets, progress=True\n)\n\n# Comprehensive analysis\nfor result in combined_results:\n    print(f\"\\n\ud83d\udcca {result.asset.name} ({result.asset.ticker})\")\n    if result.scorecard:\n        # Count good categories\n        categories = [\n            result.scorecard.performance,\n            result.scorecard.valuation,\n            result.scorecard.growth,\n            result.scorecard.profitability\n        ]\n        good_count = sum(1 for cat in categories if cat and cat.rating.name == \"GOOD\")\n        print(f\"  Financial strength: {good_count}/4 categories are good\")\n\n        # Entry point analysis\n        if result.scorecard.entry_point:\n            print(f\"  Entry timing: {result.scorecard.entry_point.rating}\")\n\n        # Risk assessment\n        if result.scorecard.red_flags:\n            risk_level = result.scorecard.red_flags.rating\n            print(f\"  Risk level: {risk_level}\")\n    else:\n        print(\"  \u274c Scorecard data unavailable\")\n\n# Performance analysis from test_end_user_usage.py\nsuccessful = sum(1 for r in combined_results if r.scorecard is not None)\nif len(combined_results) &gt; 0:\n    success_rate = successful / len(combined_results) * 100\n    print(f\"\\nSuccess rate: {success_rate:.1f}%\")\n\n    # Category analysis\n    good_performance = sum(1 for r in combined_results \n        if r.scorecard and r.scorecard.performance \n        and r.scorecard.performance.rating.name == \"GOOD\"\n    )\n    print(f\"Good performance stocks: {good_performance}/{successful}\")\n</code></pre>"},{"location":"tickersnap/stock/scorecard/#configuration","title":"Configuration","text":"Performance SettingsError Handling <p>Configure timeout and concurrency for optimal performance.</p> <p>Example</p> <pre><code># Default settings (good for most use cases)\nscorecard = StockScorecard()\n\n# High-performance settings for large batches\nscorecard = StockScorecard(\n    timeout=30,      # Longer timeout for slow connections\n    max_workers=20   # More concurrent requests\n)\n\n# Conservative settings for rate limiting\nscorecard = StockScorecard(\n    timeout=60,      # Very patient timeout\n    max_workers=5    # Fewer concurrent requests\n)\n</code></pre> <p>Handle errors gracefully with robust error handling.</p> <p>Example</p> <pre><code>from tickersnap.stock import StockScorecard\n\ntry:\n    scorecard = StockScorecard(timeout=30)\n\n    # Single stock - will raise exception on failure\n    result = scorecard.get_scorecard(\"TCS\")\n    print(f\"TCS scorecard: {result.performance.rating}\")\n\nexcept Exception as e:\n    print(f\"Failed to fetch scorecard: {e}\")\n\n# Batch processing - individual failures don't stop the process\nstocks = [\"TCS\", \"INVALID_SID\", \"RELI\"]\nresults = scorecard.get_scorecards(stocks)\n\nfor i, result in enumerate(results):\n    if result:\n        print(f\"{stocks[i]}: Success\")\n    else:\n        print(f\"{stocks[i]}: Failed (but others continued)\")\n</code></pre>"},{"location":"tickersnap/stock/scorecard/#usage-examples","title":"Usage Examples","text":"Portfolio ScreeningSector AnalysisMarket MonitoringRating-Based FilteringAdvanced Screening <p>Screen large portfolios for investment opportunities.</p> <p>Example</p> <pre><code>from tickersnap.lists import Assets\nfrom tickersnap.stock import StockScorecard\n\ndef screen_portfolio(min_good_categories=2, max_red_flags=True):\n    \"\"\"Screen all stocks for investment opportunities.\"\"\"\n\n    # Get all stocks\n    assets = Assets()\n    scorecard = StockScorecard(max_workers=25)\n\n    print(\"\ud83d\udcca Fetching all stocks...\")\n    all_stocks = assets.get_all_stocks()\n    print(f\"Total stocks: {len(all_stocks)}\")\n\n    # Get scorecards for sample stocks (for demo purposes)\n    print(\"\ud83d\udd0d Analyzing scorecards...\")\n    results = scorecard.get_stocks_with_scorecards(\n        all_stocks[:50],  # Sample first 50 for demo\n        progress=True\n    )\n\n    # Screen for good stocks\n    good_stocks = []\n    risky_stocks = []\n\n    for result in results:\n        if not result.scorecard:\n            continue\n\n        # Count good financial categories\n        financial_cats = [\n            result.scorecard.performance,\n            result.scorecard.valuation, \n            result.scorecard.growth,\n            result.scorecard.profitability\n        ]\n        good_count = sum(1 for cat in financial_cats \n                       if cat and cat.rating.name == \"GOOD\")\n\n        # Check red flags\n        has_red_flags = (result.scorecard.red_flags and \n                       result.scorecard.red_flags.rating.name == \"BAD\")\n\n        # Classification\n        if good_count &gt;= min_good_categories and (not max_red_flags or not has_red_flags):\n            good_stocks.append({\n                \"name\": result.asset.name,\n                \"ticker\": result.asset.ticker,\n                \"good_categories\": good_count,\n                \"entry_point\": result.scorecard.entry_point.rating.name if result.scorecard.entry_point else \"UNKNOWN\"\n            })\n        elif has_red_flags:\n            risky_stocks.append({\n                \"name\": result.asset.name,\n                \"ticker\": result.asset.ticker,\n                \"reason\": \"Has red flags\"\n            })\n\n    # Results\n    print(f\"\\n\ud83d\udfe2 Investment Opportunities ({len(good_stocks)} stocks):\")\n    for stock in sorted(good_stocks, key=lambda x: x[\"good_categories\"], reverse=True)[:10]:\n        print(f\"  {stock['ticker']}: {stock['name']}\")\n        print(f\"    Good categories: {stock['good_categories']}/4\")\n        print(f\"    Entry point: {stock['entry_point']}\")\n\n    print(f\"\\n\ud83d\udd34 Risky Stocks ({len(risky_stocks)} stocks):\")\n    for stock in risky_stocks[:5]:\n        print(f\"  {stock['ticker']}: {stock['reason']}\")\n\n# screen_portfolio()  # Uncomment to run\n</code></pre> <p>Analyze stocks by sector or theme.</p> <p>Example</p> <pre><code>def analyze_sector(sector_keywords, sample_size=20):\n    \"\"\"Analyze stocks in a specific sector.\"\"\"\n    from tickersnap.lists import Assets\n    from tickersnap.stock import StockScorecard\n\n    # Get sector stocks\n    assets = Assets()\n    scorecard = StockScorecard()\n\n    all_stocks = assets.get_all_stocks()\n    sector_stocks = []\n\n    for stock in all_stocks:\n        for keyword in sector_keywords:\n            if keyword.lower() in stock.name.lower():\n                sector_stocks.append(stock)\n                break\n\n    # Sample for analysis\n    sample_stocks = sector_stocks[:sample_size]\n    print(f\"\ud83d\udcca Analyzing {len(sample_stocks)} {'/'.join(sector_keywords)} stocks...\")\n\n    # Get scorecards\n    results = scorecard.get_stocks_with_scorecards(sample_stocks, progress=True)\n\n    # Sector statistics\n    total_analyzed = 0\n    category_stats = {\n        \"performance\": {\"good\": 0, \"bad\": 0, \"okay\": 0},\n        \"valuation\": {\"good\": 0, \"bad\": 0, \"okay\": 0},\n        \"growth\": {\"good\": 0, \"bad\": 0, \"okay\": 0},\n        \"profitability\": {\"good\": 0, \"bad\": 0, \"okay\": 0}\n    }\n\n    top_stocks = []\n\n    for result in results:\n        if not result.scorecard:\n            continue\n\n        total_analyzed += 1\n\n        # Track category statistics\n        categories = {\n            \"performance\": result.scorecard.performance,\n            \"valuation\": result.scorecard.valuation,\n            \"growth\": result.scorecard.growth,\n            \"profitability\": result.scorecard.profitability\n        }\n\n        good_count = 0\n        for cat_name, cat_data in categories.items():\n            if cat_data:\n                rating = cat_data.rating.name.lower()\n                if rating in category_stats[cat_name]:\n                    category_stats[cat_name][rating] += 1\n                if rating == \"good\":\n                    good_count += 1\n\n        # Track top performers\n        if good_count &gt;= 2:\n            top_stocks.append({\n                \"name\": result.asset.name,\n                \"ticker\": result.asset.ticker,\n                \"good_count\": good_count,\n                \"entry_point\": result.scorecard.entry_point.rating.name if result.scorecard.entry_point else \"UNKNOWN\"\n            })\n\n    # Sector report\n    print(f\"\\n\ud83d\udcc8 {'/'.join(sector_keywords).title()} Sector Analysis\")\n    print(f\"Stocks analyzed: {total_analyzed}\")\n\n    print(\"\\n\ud83d\udcca Category Performance:\")\n    for category, stats in category_stats.items():\n        total = sum(stats.values())\n        if total &gt; 0:\n            good_pct = (stats[\"good\"] / total) * 100\n            print(f\"  {category.title()}: {good_pct:.1f}% good ({stats['good']}/{total})\")\n\n    print(f\"\\n\ud83c\udfc6 Top Performers ({len(top_stocks)} stocks):\")\n    for stock in sorted(top_stocks, key=lambda x: x[\"good_count\"], reverse=True)[:5]:\n        print(f\"  {stock['ticker']}: {stock['good_count']}/4 good categories\")\n\n# analyze_sector([\"bank\", \"financial\"], sample_size=15)\n# analyze_sector([\"pharma\", \"drug\"], sample_size=10)\n# analyze_sector([\"tech\", \"software\", \"IT\"], sample_size=20)\n</code></pre> <p>Monitor market conditions and stock performance.</p> <p>Example</p> <pre><code>import time\nfrom datetime import datetime\n\ndef market_pulse_check(watchlist):\n    \"\"\"Check market pulse using scorecard data.\"\"\"\n    from tickersnap.stock import StockScorecard\n\n    scorecard = StockScorecard()\n\n    while True:\n        print(f\"\\n\ud83d\udd50 Market Pulse Check - {datetime.now().strftime('%Y-%m-%d %H:%M')}\")\n\n        try:\n            results = scorecard.get_scorecards(watchlist)\n\n            # Market sentiment analysis\n            total_stocks = len([r for r in results if r])\n            if total_stocks == 0:\n                print(\"\u274c No data available\")\n                continue\n\n            # Count performance ratings\n            performance_sentiment = {\"good\": 0, \"bad\": 0, \"okay\": 0}\n            entry_point_sentiment = {\"good\": 0, \"bad\": 0, \"okay\": 0}\n\n            for result in results:\n                if result:\n                    # Performance sentiment\n                    if result.performance:\n                        rating = result.performance.rating.name.lower()\n                        if rating in performance_sentiment:\n                            performance_sentiment[rating] += 1\n\n                    # Entry point sentiment\n                    if result.entry_point:\n                        rating = result.entry_point.rating.name.lower()\n                        if rating in entry_point_sentiment:\n                            entry_point_sentiment[rating] += 1\n\n            # Market signals\n            perf_good_pct = (performance_sentiment[\"good\"] / total_stocks) * 100\n            entry_good_pct = (entry_point_sentiment[\"good\"] / total_stocks) * 100\n\n            print(f\"\ud83d\udcca Market Sentiment ({total_stocks} stocks):\")\n            print(f\"  Performance: {perf_good_pct:.1f}% positive\")\n            print(f\"  Entry Points: {entry_good_pct:.1f}% favorable\")\n\n            # Overall signal\n            if perf_good_pct &gt;= 60 and entry_good_pct &gt;= 60:\n                print(\"\ud83d\udfe2 BULLISH: Strong market conditions\")\n            elif perf_good_pct &lt;= 40 or entry_good_pct &lt;= 40:\n                print(\"\ud83d\udd34 BEARISH: Weak market conditions\")\n            else:\n                print(\"\ud83d\udfe1 NEUTRAL: Mixed market conditions\")\n\n            # Individual alerts\n            print(\"\\n\ud83d\udea8 Stock Alerts:\")\n            for i, result in enumerate(results):\n                if result:\n                    sid = watchlist[i]\n\n                    # Red flag alerts\n                    if (result.red_flags and \n                        result.red_flags.rating.name == \"BAD\"):\n                        print(f\"  \u26a0\ufe0f {sid}: New red flags detected\")\n\n                    # Good entry point alerts\n                    if (result.entry_point and \n                        result.entry_point.rating.name == \"GOOD\"):\n                        print(f\"  \ud83d\udfe2 {sid}: Good entry point\")\n\n        except Exception as e:\n            print(f\"\u274c Error: {e}\")\n\n        # Check every 4 hours during market time\n        time.sleep(4 * 60 * 60)\n\n# watchlist = [\"TCS\", \"RELI\", \"INFY\", \"HDFC\", \"ICICIBANK\"]\n# market_pulse_check(watchlist)  # Uncomment to run\n</code></pre> <p>Your daily stock screening tool - filter stocks by specific rating criteria.</p> <p>Example</p> <pre><code>from tickersnap.lists import Assets\nfrom tickersnap.stock import StockScorecard\n\n# Example: Your favorite daily filter\nperformance = [\"good\", \"okay\"]\nvaluation = [\"good\", \"okay\"]\ngrowth = [\"good\"]\nprofitability = [\"good\"]\nentry_point = [\"good\", \"okay\"]\nred_flags = [\"good\"]\n\n# Get all stocks\nprint(\"\ud83d\udcca Fetching all stocks...\")\nassets = Assets()\nscorecard = StockScorecard(max_workers=25)\n\nall_stocks = assets.get_all_stocks()\n\nprint(f\"\ud83d\udd0d Analyzing {len(all_stocks)} stocks with your criteria...\")\n\n# Get scorecards for all stocks\nresults = scorecard.get_stocks_with_scorecards(all_stocks, progress=True)\n\n# Filter based on criteria\nmatching_stocks = []\n\nfor result in results:\n    if not result.scorecard:\n        continue\n\n    passes_filter = True\n\n    # Performance filter\n    if performance is not None:\n        perf_rating = result.scorecard.performance.rating.name.lower() if result.scorecard.performance else \"unknown\"\n        if perf_rating not in performance:\n            passes_filter = False\n\n    # Valuation filter\n    if valuation is not None:\n        val_rating = result.scorecard.valuation.rating.name.lower() if result.scorecard.valuation else \"unknown\"\n        if val_rating not in valuation:\n            passes_filter = False\n\n    # Growth filter\n    if growth is not None:\n        growth_rating = result.scorecard.growth.rating.name.lower() if result.scorecard.growth else \"unknown\"\n        if growth_rating not in growth:\n            passes_filter = False\n\n    # Profitability filter\n    if profitability is not None:\n        prof_rating = result.scorecard.profitability.rating.name.lower() if result.scorecard.profitability else \"unknown\"\n        if prof_rating not in profitability:\n            passes_filter = False\n\n    # Entry point filter\n    if entry_point is not None:\n        entry_rating = result.scorecard.entry_point.rating.name.lower() if result.scorecard.entry_point else \"unknown\"\n        if entry_rating not in entry_point:\n            passes_filter = False\n\n    # Red flags filter\n    if red_flags is not None:\n        red_rating = result.scorecard.red_flags.rating.name.lower() if result.scorecard.red_flags else \"unknown\"\n        if red_rating not in red_flags:\n            passes_filter = False\n\n    # If passes all filters, add to results\n    if passes_filter:\n        matching_stocks.append(result)\n\n# Display results in your preferred format\nbase_url = \"https://www.tickertape.in\"\n\nprint(f\"\\n\ud83c\udfaf Found {len(matching_stocks)} stocks matching your criteria:\\n\")\n\nfor result in matching_stocks:\n    stock_name = result.asset.name\n    ticker = result.asset.ticker\n    slug = result.asset.slug\n\n    print(f\"{stock_name} ({ticker})\")\n    print(f\"Link: {base_url}{slug}\")\n    print()\n</code></pre> <p>Advanced stock screening with custom criteria.</p> <p>Example</p> <pre><code>def advanced_stock_screener():\n    \"\"\"Advanced stock screening with multiple criteria.\"\"\"\n    from tickersnap.lists import Assets\n    from tickersnap.stock import StockScorecard\n\n    assets = Assets()\n    scorecard = StockScorecard(max_workers=30)\n\n    # Get sample of stocks for demo (use all_stocks for full screening)\n    all_stocks = assets.get_all_stocks()\n    sample_stocks = all_stocks[:100]  # Sample for demo\n\n    print(f\"\ud83d\udd0d Advanced screening of {len(sample_stocks)} stocks...\")\n\n    # Get all scorecard data\n    results = scorecard.get_stocks_with_scorecards(sample_stocks, progress=True)\n\n    # Define screening criteria\n    screens = {\n        \"value_picks\": {\n            \"name\": \"Value Picks\",\n            \"criteria\": lambda r: (\n                r.scorecard and\n                r.scorecard.valuation and r.scorecard.valuation.rating.name == \"GOOD\" and\n                r.scorecard.performance and r.scorecard.performance.rating.name != \"BAD\" and\n                r.scorecard.entry_point and r.scorecard.entry_point.rating.name == \"GOOD\"\n            )\n        },\n        \"growth_stocks\": {\n            \"name\": \"Growth Stocks\", \n            \"criteria\": lambda r: (\n                r.scorecard and\n                r.scorecard.growth and r.scorecard.growth.rating.name == \"GOOD\" and\n                r.scorecard.profitability and r.scorecard.profitability.rating.name == \"GOOD\" and\n                (not r.scorecard.red_flags or r.scorecard.red_flags.rating.name != \"BAD\")\n            )\n        },\n        \"quality_stocks\": {\n            \"name\": \"Quality Stocks\",\n            \"criteria\": lambda r: (\n                r.scorecard and\n                sum(1 for cat in [r.scorecard.performance, r.scorecard.valuation,\n                                r.scorecard.growth, r.scorecard.profitability]\n                   if cat and cat.rating.name == \"GOOD\") &gt;= 3\n            )\n        },\n        \"turnaround_plays\": {\n            \"name\": \"Turnaround Plays\",\n            \"criteria\": lambda r: (\n                r.scorecard and\n                r.scorecard.performance and r.scorecard.performance.rating.name == \"BAD\" and\n                r.scorecard.valuation and r.scorecard.valuation.rating.name == \"GOOD\" and\n                r.scorecard.entry_point and r.scorecard.entry_point.rating.name == \"GOOD\"\n            )\n        }\n    }\n\n    # Apply screens\n    screen_results = {}\n    for screen_id, screen_config in screens.items():\n        matches = []\n        for result in results:\n            if screen_config[\"criteria\"](result):\n                matches.append({\n                    \"name\": result.asset.name,\n                    \"ticker\": result.asset.ticker,\n                    \"isin\": result.asset.isin\n                })\n        screen_results[screen_id] = matches\n\n    # Display results\n    print(\"\\n\ud83c\udfaf Screening Results:\")\n    for screen_id, matches in screen_results.items():\n        screen_name = screens[screen_id][\"name\"]\n        print(f\"\\n\ud83d\udcca {screen_name} ({len(matches)} stocks):\")\n\n        for stock in matches[:10]:  # Show top 10\n            print(f\"  \u2022 {stock['ticker']}: {stock['name']}\")\n\n        if len(matches) &gt; 10:\n            print(f\"  ... and {len(matches) - 10} more stocks\")\n\n# advanced_stock_screener()  # Uncomment to run\n</code></pre>"},{"location":"tickersnap/stock/scorecard/#data-models","title":"Data Models","text":"Model Description Key Fields <code>StockScores</code> Complete stock scorecard <code>performance</code>, <code>valuation</code>, <code>growth</code>, <code>profitability</code>, <code>entry_point</code>, <code>red_flags</code> <code>StockWithScorecard</code> Combined asset + scorecard <code>asset</code>, <code>scorecard</code> <code>Score</code> Individual category score <code>name</code>, <code>description</code>, <code>value</code>, <code>rating</code> <code>ScoreRating</code> Rating classification <code>GOOD</code>, <code>BAD</code>, <code>OKAY</code>, <code>UNKNOWN</code>"},{"location":"tickersnap/stock/scorecard/#scorecard-categories","title":"Scorecard Categories","text":"Category Type Description Key Insights Performance Financial Stock price performance vs market Recent returns and momentum Valuation Financial Stock valuation vs market average Price attractiveness and value Growth Financial Company growth prospects Revenue/earnings growth potential Profitability Financial Company profitability metrics Operational efficiency and margins Entry Point Trading Current entry timing assessment Technical and fundamental entry signals Red Flags Trading Risk assessment and warnings Regulatory issues, debt concerns, etc."},{"location":"tickersnap/stock/scorecard/#score-ratings","title":"Score Ratings","text":"Rating Description Investment Signal Color Code GOOD Positive indicator \ud83d\udfe2 Favorable conditions Green OKAY Neutral indicator \ud83d\udfe1 Average conditions Yellow/Orange BAD Negative indicator \ud83d\udd34 Unfavorable conditions Red UNKNOWN Insufficient data \u26aa Unable to determine Gray"},{"location":"tickersnap/stock/scorecard/#tickersnap.stock.scorecard","title":"<code>tickersnap.stock.scorecard</code>","text":"<p>StockScorecard - Simplified Stock Scorecard Data for Analysis</p> <p>Provides simplified access to stock scorecard data for common daily usage:</p> <ul> <li><code>get_scorecard()</code>: Get scorecard for a single stock</li> <li><code>get_scorecards()</code>: Get scorecards for multiple stocks with progress tracking</li> <li><code>get_stock_with_scorecard()</code>: Get combined asset + scorecard data for single stock</li> <li><code>get_stocks_with_scorecards()</code>: Get combined asset +     scorecard data for multiple stocks</li> </ul> <p>Removes API complexity and provides clean, user-friendly scorecard analysis.</p>"},{"location":"tickersnap/stock/scorecard/#tickersnap.stock.scorecard.StockScorecard","title":"<code>StockScorecard</code>","text":"<p>Simplified stock scorecard data for market analysis.</p> <p>Removes the Tickertape API complexity and provides simple functions to get scorecard data that users need for daily stock analysis and screening.</p> Features <ul> <li>Single and batch scorecard retrieval</li> <li>Combined asset + scorecard data</li> <li>Progress tracking for large batches</li> <li>Concurrent processing for performance</li> <li>Error resilience (partial failures don't stop the process)</li> </ul>"},{"location":"tickersnap/stock/scorecard/#tickersnap.stock.scorecard.StockScorecard.__init__","title":"<code>__init__(timeout=10, max_workers=10)</code>","text":"<p>Initialize StockScorecard.</p> <p>Parameters:</p> Name Type Description Default <code>timeout</code> <code>int</code> <p>Request timeout in seconds. Defaults to 10.</p> <code>10</code> <code>max_workers</code> <code>int</code> <p>Maximum concurrent workers for batch operations. Defaults to 10.</p> <code>10</code>"},{"location":"tickersnap/stock/scorecard/#tickersnap.stock.scorecard.StockScorecard.get_scorecard","title":"<code>get_scorecard(sid)</code>","text":"<p>Get scorecard for a single stock by SID.</p> <p>Parameters:</p> Name Type Description Default <code>sid</code> <code>str</code> <p>Stock SID (Security ID) as used by Tickertape.</p> required <p>Returns:</p> Name Type Description <code>StockScores</code> <code>StockScores</code> <p>Simplified scorecard data with user-friendly ratings.</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If the API request fails or SID is invalid.</p>"},{"location":"tickersnap/stock/scorecard/#tickersnap.stock.scorecard.StockScorecard.get_scorecards","title":"<code>get_scorecards(sids, progress=None)</code>","text":"<p>Get scorecards for multiple stocks by SID list.</p> <p>Parameters:</p> Name Type Description Default <code>sids</code> <code>List[str]</code> <p>List of stock SIDs to fetch.</p> required <code>progress</code> <code>Optional[ProgressType]</code> <p>Progress tracking options: - None (default): No progress tracking - True: Show tqdm progress bar (requires: pip install tqdm) - False: (same as None) No progress tracking - Callable: Custom progress function(completed, total, current_sid)</p> <code>None</code> <p>Returns:</p> Type Description <code>List[Optional[StockScores]]</code> <p>List[Optional[StockScores]]: List of scorecard data. None entries indicate failed requests for that SID.</p> Note <ul> <li>Uses concurrent processing for better performance</li> <li>Partial failures don't stop the entire process</li> <li>Order matches input SID order</li> </ul>"},{"location":"tickersnap/stock/scorecard/#tickersnap.stock.scorecard.StockScorecard.get_stock_with_scorecard","title":"<code>get_stock_with_scorecard(asset)</code>","text":"<p>Get combined asset + scorecard data for single stock.</p> <p>Parameters:</p> Name Type Description Default <code>asset</code> <code>AssetData</code> <p>Stock asset information.</p> required <p>Returns:</p> Name Type Description <code>StockWithScorecard</code> <code>StockWithScorecard</code> <p>Combined asset and scorecard data. scorecard will be None if the API request fails.</p>"},{"location":"tickersnap/stock/scorecard/#tickersnap.stock.scorecard.StockScorecard.get_stocks_with_scorecards","title":"<code>get_stocks_with_scorecards(assets, progress=None)</code>","text":"<p>Get combined asset + scorecard data for multiple stocks.</p> <p>Parameters:</p> Name Type Description Default <code>assets</code> <code>List[AssetData]</code> <p>List of stock asset information.</p> required <code>progress</code> <code>Optional[ProgressType]</code> <p>Progress tracking options: - None (default): No progress tracking - True: Show tqdm progress bar (requires: pip install tqdm) - False: (same as None) No progress tracking - Callable: Custom progress function(completed, total, current_name)</p> <code>None</code> <p>Returns:</p> Type Description <code>List[StockWithScorecard]</code> <p>List[StockWithScorecard]: List of combined asset and scorecard data. scorecard will be None for assets where API requests failed.</p> Note <ul> <li>Uses concurrent processing for better performance</li> <li>Partial failures don't stop the entire process</li> <li>Order matches input assets order</li> </ul>"}]}